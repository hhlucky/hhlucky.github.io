<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>boundless</title>
    <description>Developer</description>
    <link>http://hhlucky.github.io/</link>
    <atom:link href="http://hhlucky.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 17 Oct 2015 22:37:04 +0800</pubDate>
    <lastBuildDate>Sat, 17 Oct 2015 22:37:04 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Google Java编程风格指南</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;这份文档是Google
Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则，
我们才认为它符合Google的Java编程风格。&lt;/p&gt;

&lt;p&gt;与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题，
同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则，
对于那些不是明确强制要求的，我们尽量避免提供意见。&lt;/p&gt;

&lt;h3 id=&quot;1-1-术语说明&quot;&gt;1.1 术语说明&lt;/h3&gt;

&lt;p&gt;在本文档中，除非另有说明：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 术语class可表示一个普通类，枚举类，接口或是annotation类型(&lt;code class=&quot;prettyprint&quot;&gt;@interface&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt; 术语comment只用来指代实现的注释(implementation
comments)，我们不使用“documentation comments”一词，而是用Javadoc。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其他的术语说明会偶尔在后面的文档出现。&lt;/p&gt;

&lt;h3 id=&quot;1-2-指南说明&quot;&gt;1.2 指南说明&lt;/h3&gt;

&lt;p&gt;本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。
示例中的格式选择不应该被强制定为规则。&lt;/p&gt;

&lt;h2 id=&quot;源文件基础&quot;&gt;源文件基础&lt;/h2&gt;

&lt;h3 id=&quot;2-1-文件名&quot;&gt;2.1 文件名&lt;/h3&gt;

&lt;p&gt;源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为&lt;code class=&quot;prettyprint&quot;&gt;.java&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;2-2-文件编码：utf-8&quot;&gt;2.2 文件编码：UTF-8&lt;/h3&gt;

&lt;p&gt;源文件编码格式为UTF-8。&lt;/p&gt;

&lt;h3 id=&quot;2-3-特殊字符&quot;&gt;2.3 特殊字符&lt;/h3&gt;

&lt;h4 id=&quot;2-3-1-空白字符&quot;&gt;2.3.1 空白字符&lt;/h4&gt;

&lt;p&gt;除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 所有其它字符串中的空白字符都要进行转义。&lt;/li&gt;
&lt;li&gt; 制表符不用于缩进。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-3-2-特殊转义序列&quot;&gt;2.3.2 特殊转义序列&lt;/h4&gt;

&lt;p&gt;对于具有特殊&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97&quot;&gt;转义序列&lt;/a&gt;的任何字符(\b,\t, \n, \f, \r, \“,\‘及\)，我们使用它的转义序列，而不是相应的八进制(比如&lt;code class=&quot;prettyprint&quot;&gt;\012&lt;/code&gt;)或Unicode(比如&lt;code class=&quot;prettyprint&quot;&gt;\u000a&lt;/code&gt;)转义。&lt;/p&gt;

&lt;h4 id=&quot;2-3-3-非ascii字符&quot;&gt;2.3.3 非ASCII字符&lt;/h4&gt;

&lt;p&gt;对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip:
在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;String unitAbbrev = &amp;quot;μs&amp;quot;;                                 | 赞，即使没有注释也非常清晰
String unitAbbrev = &amp;quot;\u03bcs&amp;quot;; // &amp;quot;μs&amp;quot;                    | 允许，但没有理由要这样做
String unitAbbrev = &amp;quot;\u03bcs&amp;quot;; // Greek letter mu, &amp;quot;s&amp;quot;    | 允许，但这样做显得笨拙还容易出错
String unitAbbrev = &amp;quot;\u03bcs&amp;quot;;                            | 很糟，读者根本看不出这是什么
return &amp;#39;\ufeff&amp;#39; + content; // byte order mark             | Good，对于非打印字符，使用转义，并在必要时写上注释
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip:
永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行，
你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;源文件结构&quot;&gt;源文件结构&lt;/h2&gt;

&lt;p&gt;一个源文件包含(按顺序地)：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 许可证或版权信息(如有需要)&lt;/li&gt;
&lt;li&gt; package语句&lt;/li&gt;
&lt;li&gt; import语句&lt;/li&gt;
&lt;li&gt; 一个顶级类(&lt;strong&gt;只有一个&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上每个部分之间用一个空行隔开。&lt;/p&gt;

&lt;h3 id=&quot;3-1-许可证或版权信息&quot;&gt;3.1 许可证或版权信息&lt;/h3&gt;

&lt;p&gt;如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。&lt;/p&gt;

&lt;h3 id=&quot;3-2-package语句&quot;&gt;3.2 package语句&lt;/h3&gt;

&lt;p&gt;package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)&lt;/p&gt;

&lt;h3 id=&quot;3-3-import语句&quot;&gt;3.3 import语句&lt;/h3&gt;

&lt;h4 id=&quot;3-3-1-import不要使用通配符&quot;&gt;3.3.1 import不要使用通配符&lt;/h4&gt;

&lt;p&gt;即，不要出现类似这样的import语句：&lt;code class=&quot;prettyprint&quot;&gt;import java.util.*;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-3-2-不要换行&quot;&gt;3.3.2 不要换行&lt;/h4&gt;

&lt;p&gt;import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行)&lt;/p&gt;

&lt;h4 id=&quot;3-3-3-顺序和间距&quot;&gt;3.3.3 顺序和间距&lt;/h4&gt;

&lt;p&gt;import语句可分为以下几组，按照这个顺序，每组由一个空行分隔：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 所有的静态导入独立成组&lt;/li&gt;
&lt;li&gt; &lt;code class=&quot;prettyprint&quot;&gt;com.google&lt;/code&gt; imports(仅当这个源文件是在&lt;code class=&quot;prettyprint&quot;&gt;com.google&lt;/code&gt;包下)&lt;/li&gt;
&lt;li&gt; 第三方的包。每个顶级包为一组，字典序。例如：android, com, junit,
org, sun&lt;/li&gt;
&lt;li&gt; &lt;code class=&quot;prettyprint&quot;&gt;java&lt;/code&gt; imports&lt;/li&gt;
&lt;li&gt; &lt;code class=&quot;prettyprint&quot;&gt;javax&lt;/code&gt; imports&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;组内不空行，按字典序排列。&lt;/p&gt;

&lt;h3 id=&quot;3-4-类声明&quot;&gt;3.4 类声明&lt;/h3&gt;

&lt;h4 id=&quot;3-4-1-只有一个顶级类声明m&quot;&gt;3.4.1 只有一个顶级类声明m&lt;/h4&gt;

&lt;p&gt;每个顶级类都在一个与它同名的源文件中(当然，还包含&lt;code class=&quot;prettyprint&quot;&gt;.java&lt;/code&gt;后缀)。&lt;/p&gt;

&lt;p&gt;例外：&lt;code class=&quot;prettyprint&quot;&gt;package-info.java&lt;/code&gt;，该文件中可没有&lt;code class=&quot;prettyprint&quot;&gt;package-info&lt;/code&gt;类。&lt;/p&gt;

&lt;h4 id=&quot;3-4-2-类成员顺序&quot;&gt;3.4.2 类成员顺序&lt;/h4&gt;

&lt;p&gt;类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。
最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如，
新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。&lt;/p&gt;

&lt;h5 id=&quot;3-4-2-1-重载：永不分离&quot;&gt;3.4.2.1 重载：永不分离&lt;/h5&gt;

&lt;p&gt;当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。&lt;/p&gt;

&lt;h2 id=&quot;格式&quot;&gt;格式&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;术语说明&lt;/strong&gt;：块状结构(block-like
construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。&lt;/p&gt;

&lt;h3 id=&quot;4-1-大括号&quot;&gt;4.1 大括号&lt;/h3&gt;

&lt;h4 id=&quot;4-1-1-使用大括号-即使是可选的&quot;&gt;4.1.1 使用大括号(即使是可选的)&lt;/h4&gt;

&lt;p&gt;大括号与&lt;code class=&quot;prettyprint&quot;&gt;if, else, for, do, while&lt;/code&gt;语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。&lt;/p&gt;

&lt;h4 id=&quot;4-1-2-非空块：k-amp-r-风格&quot;&gt;4.1.2 非空块：K &amp;amp; R 风格&lt;/h4&gt;

&lt;p&gt;对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格 (&lt;a href=&quot;http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html&quot;&gt;Egyptian brackets&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  左大括号前不换行&lt;/li&gt;
&lt;li&gt;  左大括号后换行&lt;/li&gt;
&lt;li&gt;  右大括号前换行&lt;/li&gt;
&lt;li&gt;  如果右大括号是一个语句、函数体或类的终止，则右大括号后换行;
否则不换行。例如，如果右大括号后面是else或逗号，则不换行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;       &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProblemException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;recover&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;4.8.1节给出了enum类的一些例外。&lt;/p&gt;

&lt;h4 id=&quot;4-1-3-空块：可以用简洁版本&quot;&gt;4.1.3 空块：可以用简洁版本&lt;/h4&gt;

&lt;p&gt;一个空的块状结构里什么也不包含，大括号可以简洁地写成&lt;code class=&quot;prettyprint&quot;&gt;{}&lt;/code&gt;，不需要换行。例外：如果它是一个多块语句的一部分(if/else
或 try/catch/finally) ，即使大括号内没内容，右大括号也要换行。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doNothing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-2-块缩进：2个空格&quot;&gt;4.2 块缩进：2个空格&lt;/h3&gt;

&lt;p&gt;每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)&lt;/p&gt;

&lt;h3 id=&quot;4-3-一行一个语句&quot;&gt;4.3 一行一个语句&lt;/h3&gt;

&lt;p&gt;每个语句后要换行。&lt;/p&gt;

&lt;h3 id=&quot;4-4-列限制：80或100&quot;&gt;4.4 列限制：80或100&lt;/h3&gt;

&lt;p&gt;一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。&lt;/p&gt;

&lt;p&gt;例外：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。&lt;/li&gt;
&lt;li&gt; &lt;code class=&quot;prettyprint&quot;&gt;package&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;import&lt;/code&gt;语句(见3.2节和3.3节)。&lt;/li&gt;
&lt;li&gt; 注释中那些可能被剪切并粘贴到shell中的命令行。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;4-5-自动换行&quot;&gt;4.5 自动换行&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;术语说明&lt;/strong&gt;：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。&lt;/p&gt;

&lt;p&gt;我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip:
提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;4-5-1-从哪里断开&quot;&gt;4.5.1 从哪里断开&lt;/h4&gt;

&lt;p&gt;自动换行的基本准则是：更倾向于在更高的语法级别处断开。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 如果在&lt;code class=&quot;prettyprint&quot;&gt;非赋值运算符&lt;/code&gt;处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。
这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;amp;（&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;T extends Foo &amp;amp; Bar&amp;gt;&lt;/code&gt;)，catch块中的管道符号(&lt;code class=&quot;prettyprint&quot;&gt;catch (FooException | BarException e&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt; 如果在&lt;code class=&quot;prettyprint&quot;&gt;赋值运算符&lt;/code&gt;处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于&lt;code class=&quot;prettyprint&quot;&gt;foreach&lt;/code&gt;语句中的分号。&lt;/li&gt;
&lt;li&gt; 方法名或构造函数名与左括号留在同一行。&lt;/li&gt;
&lt;li&gt; 逗号(,)与其前面的内容留在同一行。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;4-5-2-自动换行时缩进至少-4个空格&quot;&gt;4.5.2 自动换行时缩进至少+4个空格&lt;/h4&gt;

&lt;p&gt;自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。&lt;/p&gt;

&lt;p&gt;当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。&lt;/p&gt;

&lt;p&gt;第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。&lt;/p&gt;

&lt;h3 id=&quot;4-6-空白&quot;&gt;4.6 空白&lt;/h3&gt;

&lt;h4 id=&quot;4-6-1-垂直空白&quot;&gt;4.6.1 垂直空白&lt;/h4&gt;

&lt;p&gt;以下情况需要使用一个空行：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;例外&lt;/strong&gt;：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在函数体内，语句的逻辑分组间使用空行。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要满足本文档中其他节的空行要求(比如3.3节：import语句)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。&lt;/p&gt;

&lt;h4 id=&quot;4-6-2-水平空白&quot;&gt;4.6.2 水平空白&lt;/h4&gt;

&lt;p&gt;除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 分隔任何保留字与紧随其后的左括号(&lt;code class=&quot;prettyprint&quot;&gt;(&lt;/code&gt;)(如&lt;code class=&quot;prettyprint&quot;&gt;if, for catch&lt;/code&gt;等)。&lt;/li&gt;
&lt;li&gt; 分隔任何保留字与其前面的右大括号(&lt;code class=&quot;prettyprint&quot;&gt;}&lt;/code&gt;)(如&lt;code class=&quot;prettyprint&quot;&gt;else, catch&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在任何左大括号前(&lt;code class=&quot;prettyprint&quot;&gt;{&lt;/code&gt;)，两个例外：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code class=&quot;prettyprint&quot;&gt;@SomeAnnotation({a, b})&lt;/code&gt;(不使用空格)。&lt;/li&gt;
&lt;li&gt;  &lt;code class=&quot;prettyprint&quot;&gt;String[][] x = foo;&lt;/code&gt;(大括号间没有空格，见下面的Note)。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  类型界限中的&amp;amp;(&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;T extends Foo &amp;amp; Bar&amp;gt;&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;  catch块中的管道符号(&lt;code class=&quot;prettyprint&quot;&gt;catch (FooException | BarException e&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;  &lt;code class=&quot;prettyprint&quot;&gt;foreach&lt;/code&gt;语句中的分号。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code class=&quot;prettyprint&quot;&gt;, : ;&lt;/code&gt;及右括号(&lt;code class=&quot;prettyprint&quot;&gt;)&lt;/code&gt;)后&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类型和变量之间：List list。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数组初始化中，大括号内的空格是可选的，即&lt;code class=&quot;prettyprint&quot;&gt;new int[] {5, 6}&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;new int[] { 5, 6 }&lt;/code&gt;都是可以的。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;4-6-3-水平对齐：不做要求&quot;&gt;4.6.3 水平对齐：不做要求&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;术语说明&lt;/strong&gt;：水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。&lt;/p&gt;

&lt;p&gt;这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。&lt;/p&gt;

&lt;p&gt;以下示例先展示未对齐的代码，然后是对齐的代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this is fine&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this too&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// permitted, but future edits&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// may leave it unaligned&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。
这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)，
这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;4-7-用小括号来限定组：推荐&quot;&gt;4.7 用小括号来限定组：推荐&lt;/h3&gt;

&lt;p&gt;除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。
我们没有理由假设读者能记住整个Java运算符优先级表。&lt;/p&gt;

&lt;h3 id=&quot;4-8-具体结构&quot;&gt;4.8 具体结构&lt;/h3&gt;

&lt;h4 id=&quot;4-8-1-枚举类&quot;&gt;4.8.1 枚举类&lt;/h4&gt;

&lt;p&gt;枚举常量间用逗号隔开，换行可选。&lt;/p&gt;

&lt;p&gt;没有方法和文档的枚举类可写成数组初始化的格式：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Suit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLUBS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEARTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPADES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIAMONDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。&lt;/p&gt;

&lt;h4 id=&quot;4-8-2-变量声明&quot;&gt;4.8.2 变量声明&lt;/h4&gt;

&lt;h5 id=&quot;4-8-2-1-每次只声明一个变量&quot;&gt;4.8.2.1 每次只声明一个变量&lt;/h5&gt;

&lt;p&gt;不要使用组合声明，比如&lt;code class=&quot;prettyprint&quot;&gt;int a, b;&lt;/code&gt;。&lt;/p&gt;

&lt;h5 id=&quot;4-8-2-2-需要时才声明，并尽快进行初始化&quot;&gt;4.8.2.2 需要时才声明，并尽快进行初始化&lt;/h5&gt;

&lt;p&gt;不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。
局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。&lt;/p&gt;

&lt;h4 id=&quot;4-8-3-数组&quot;&gt;4.8.3 数组&lt;/h4&gt;

&lt;h5 id=&quot;4-8-3-1-数组初始化：可写成块状结构&quot;&gt;4.8.3.1 数组初始化：可写成块状结构&lt;/h5&gt;

&lt;p&gt;数组初始化可以写成块状结构，比如，下面的写法都是OK的：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;4-8-3-2-非c风格的数组声明&quot;&gt;4.8.3.2 非C风格的数组声明&lt;/h5&gt;

&lt;p&gt;中括号是类型的一部分：&lt;code class=&quot;prettyprint&quot;&gt;String[] args&lt;/code&gt;， 而非&lt;code class=&quot;prettyprint&quot;&gt;String args[]&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;4-8-4-switch语句&quot;&gt;4.8.4 switch语句&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;术语说明&lt;/strong&gt;：switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(&lt;code class=&quot;prettyprint&quot;&gt;case FOO:&lt;/code&gt;或&lt;code class=&quot;prettyprint&quot;&gt;default:&lt;/code&gt;)，后面跟着一条或多条语句。&lt;/p&gt;

&lt;h5 id=&quot;4-8-4-1-缩进&quot;&gt;4.8.4.1 缩进&lt;/h5&gt;

&lt;p&gt;与其它块状结构一致，switch块中的内容缩进为2个空格。&lt;/p&gt;

&lt;p&gt;每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。&lt;/p&gt;

&lt;h5 id=&quot;4-8-4-2-fall-through：注释&quot;&gt;4.8.4.2 Fall-through：注释&lt;/h5&gt;

&lt;p&gt;在一个switch块内，每个语句组要么通过&lt;code class=&quot;prettyprint&quot;&gt;break, continue, return&lt;/code&gt;或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组，
任何能表达这个意思的注释都是OK的(典型的是用&lt;code class=&quot;prettyprint&quot;&gt;// fall through&lt;/code&gt;)。这个特殊的注释并不需要在最后一个语句组(一般是&lt;code class=&quot;prettyprint&quot;&gt;default&lt;/code&gt;)中出现。示例：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;prepareOneOrTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// fall through&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;handleOneTwoOrThree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;handleLargeNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;4-8-4-3-default的情况要写出来&quot;&gt;4.8.4.3 default的情况要写出来&lt;/h5&gt;

&lt;p&gt;每个switch语句都包含一个&lt;code class=&quot;prettyprint&quot;&gt;default&lt;/code&gt;语句组，即使它什么代码也不包含。&lt;/p&gt;

&lt;h4 id=&quot;4-8-5-注解-annotations&quot;&gt;4.8.5 注解(Annotations)&lt;/h4&gt;

&lt;p&gt;注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;nd&quot;&gt;@Nullable&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNameIfPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;例外&lt;/strong&gt;：单个的注解可以和签名的第一行出现在同一行。例如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Partial&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数和局部变量注解没有特定规则。&lt;/p&gt;

&lt;h4 id=&quot;4-8-6-注释&quot;&gt;4.8.6 注释&lt;/h4&gt;

&lt;h5 id=&quot;4-8-6-1-块注释风格&quot;&gt;4.8.6.1 块注释风格&lt;/h5&gt;

&lt;p&gt;块注释与其周围的代码在同一缩进级别。它们可以是&lt;code class=&quot;prettyprint&quot;&gt;/* ... */&lt;/code&gt;风格，也可以是&lt;code class=&quot;prettyprint&quot;&gt;// ...&lt;/code&gt;风格。对于多行的&lt;code class=&quot;prettyprint&quot;&gt;/* ... */&lt;/code&gt;注释，后续行必须从&lt;code class=&quot;prettyprint&quot;&gt;*&lt;/code&gt;开始，
并且与前一行的&lt;code class=&quot;prettyprint&quot;&gt;*&lt;/code&gt;对齐。以下示例注释都是OK的。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/*
 * This is          // And so           /* Or you can
 * okay.            // is this.          * even do this. */
 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注释不要封闭在由星号或其它字符绘制的框架里。&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用&lt;code class=&quot;prettyprint&quot;&gt;/* ... */&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;4-8-7-modifiers&quot;&gt;4.8.7 Modifiers&lt;/h4&gt;

&lt;p&gt;类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public protected private abstract static final transient volatile synchronized native strictfp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;命名约定&quot;&gt;命名约定&lt;/h2&gt;

&lt;h3 id=&quot;5-1-对所有标识符都通用的规则&quot;&gt;5.1 对所有标识符都通用的规则&lt;/h3&gt;

&lt;p&gt;标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式&lt;code class=&quot;prettyprint&quot;&gt;\w+&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在Google其它编程语言风格中使用的特殊前缀或后缀，如&lt;code class=&quot;prettyprint&quot;&gt;name_&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;mName&lt;/code&gt;,
&lt;code class=&quot;prettyprint&quot;&gt;s_name&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;kName&lt;/code&gt;，在Java编程风格中都不再使用。&lt;/p&gt;

&lt;h3 id=&quot;5-2-标识符类型的规则&quot;&gt;5.2 标识符类型的规则&lt;/h3&gt;

&lt;h4 id=&quot;5-2-1-包名&quot;&gt;5.2.1 包名&lt;/h4&gt;

&lt;p&gt;包名全部小写，连续的单词只是简单地连接起来，不使用下划线。&lt;/p&gt;

&lt;h4 id=&quot;5-2-2-类名&quot;&gt;5.2.2 类名&lt;/h4&gt;

&lt;p&gt;类名都以&lt;code class=&quot;prettyprint&quot;&gt;UpperCamelCase&lt;/code&gt;风格编写。&lt;/p&gt;

&lt;p&gt;类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。&lt;/p&gt;

&lt;p&gt;测试类的命名以它要测试的类的名称开始，以&lt;code class=&quot;prettyprint&quot;&gt;Test&lt;/code&gt;结束。例如，&lt;code class=&quot;prettyprint&quot;&gt;HashTest&lt;/code&gt;或&lt;code class=&quot;prettyprint&quot;&gt;HashIntegrationTest&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;5-2-3-方法名&quot;&gt;5.2.3 方法名&lt;/h4&gt;

&lt;p&gt;方法名都以&lt;code class=&quot;prettyprint&quot;&gt;lowerCamelCase&lt;/code&gt;风格编写。&lt;/p&gt;

&lt;p&gt;方法名通常是动词或动词短语。&lt;/p&gt;

&lt;p&gt;下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：&lt;code class=&quot;prettyprint&quot;&gt;test&amp;lt;MethodUnderTest&amp;gt;_&amp;lt;state&amp;gt;&lt;/code&gt;，例如&lt;code class=&quot;prettyprint&quot;&gt;testPop_emptyStack&lt;/code&gt;。
并不存在唯一正确的方式来命名测试方法。&lt;/p&gt;

&lt;h4 id=&quot;5-2-4-常量名&quot;&gt;5.2.4 常量名&lt;/h4&gt;

&lt;p&gt;常量名命名模式为&lt;code class=&quot;prettyprint&quot;&gt;CONSTANT_CASE&lt;/code&gt;，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？&lt;/p&gt;

&lt;p&gt;每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时，
考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。
只是永远不&lt;code class=&quot;prettyprint&quot;&gt;打算&lt;/code&gt;改变对象一般是不够的，它要真的一直不变才能将它示为常量。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Constants&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NUMBER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NAMES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Ed&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Ann&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMMA_JOINER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Joiner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// because Joiner is immutable&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeMutableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMPTY_ARRAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeEnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENUM_CONSTANT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Not constants&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonFinal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;non-final&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonStatic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;non-static&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SomeMutableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nonEmptyArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;these&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;can&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;change&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这些名字通常是名词或名词短语。&lt;/p&gt;

&lt;h4 id=&quot;5-2-5-非常量字段名&quot;&gt;5.2.5 非常量字段名&lt;/h4&gt;

&lt;p&gt;非常量字段名以&lt;code class=&quot;prettyprint&quot;&gt;lowerCamelCase&lt;/code&gt;风格编写。&lt;/p&gt;

&lt;p&gt;这些名字通常是名词或名词短语。&lt;/p&gt;

&lt;h4 id=&quot;5-2-6-参数名&quot;&gt;5.2.6 参数名&lt;/h4&gt;

&lt;p&gt;参数名以&lt;code class=&quot;prettyprint&quot;&gt;lowerCamelCase&lt;/code&gt;风格编写。&lt;/p&gt;

&lt;p&gt;参数应该避免用单个字符命名。&lt;/p&gt;

&lt;h4 id=&quot;5-2-7-局部变量名&quot;&gt;5.2.7 局部变量名&lt;/h4&gt;

&lt;p&gt;局部变量名以&lt;code class=&quot;prettyprint&quot;&gt;lowerCamelCase&lt;/code&gt;风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。&lt;/p&gt;

&lt;p&gt;虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。&lt;/p&gt;

&lt;p&gt;即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。&lt;/p&gt;

&lt;h4 id=&quot;5-2-8-类型变量名&quot;&gt;5.2.8 类型变量名&lt;/h4&gt;

&lt;p&gt;类型变量可用以下两种风格之一进行命名：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。&lt;/li&gt;
&lt;li&gt;  以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-3-驼峰式命名法-camelcase&quot;&gt;5.3 驼峰式命名法(CamelCase)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB&quot;&gt;驼峰式命名法&lt;/a&gt;分大驼峰式命名法(&lt;code class=&quot;prettyprint&quot;&gt;UpperCamelCase&lt;/code&gt;)和小驼峰式命名法(&lt;code class=&quot;prettyprint&quot;&gt;lowerCamelCase&lt;/code&gt;)。
有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如&lt;q&gt;IPv6&lt;/q&gt;或&lt;q&gt;iOS&lt;/q&gt;)。Google指定了以下的转换方案。&lt;/p&gt;

&lt;p&gt;名字从&lt;code class=&quot;prettyprint&quot;&gt;散文形式&lt;/code&gt;(prose form)开始:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; 把短语转换为纯ASCII码，并且移除任何单引号。例如：&lt;q&gt;Müller’s
algorithm&lt;/q&gt;将变成&lt;q&gt;Muellers algorithm&lt;/q&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如&lt;q&gt;AdWords&lt;/q&gt;将分割成&lt;q&gt;ad
words&lt;/q&gt;)。
需要注意的是&lt;q&gt;iOS&lt;/q&gt;并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  每个单词的第一个字母都大写，来得到大驼峰式命名。&lt;/li&gt;
&lt;li&gt;  除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后将所有的单词连接起来得到一个标识符。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Prose form               | Correct          |     Incorrect
------------------------------------------------------------------
&amp;quot;XML HTTP request&amp;quot;       |  XmlHttpRequest |        XMLHTTPRequest
&amp;quot;new customer ID&amp;quot;         | newCustomerId   |      newCustomerID
&amp;quot;inner stopwatch&amp;quot;           | innerStopwatch    |       innerStopWatch
&amp;quot;supports IPv6 on iOS?&amp;quot;  | supportsIpv6OnIos|  supportsIPv6OnIOS
&amp;quot;YouTube importer&amp;quot;        |YouTubeImporter    | YoutubeImporter*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加星号处表示可以，但不推荐。&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note：在英语中，某些带有连字符的单词形式不唯一。例如：&lt;q&gt;nonempty&lt;/q&gt;和&lt;q&gt;non-empty&lt;/q&gt;都是正确的，因此方法名&lt;code class=&quot;prettyprint&quot;&gt;checkNonempty&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;checkNonEmpty&lt;/code&gt;也都是正确的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;编程实践&quot;&gt;编程实践&lt;/h2&gt;

&lt;h3 id=&quot;6-1-override：能用则用&quot;&gt;6.1 @Override：能用则用&lt;/h3&gt;

&lt;p&gt;只要是合法的，就把&lt;code class=&quot;prettyprint&quot;&gt;@Override&lt;/code&gt;注解给用上。&lt;/p&gt;

&lt;h3 id=&quot;6-2-捕获的异常：不能忽视&quot;&gt;6.2 捕获的异常：不能忽视&lt;/h3&gt;

&lt;p&gt;除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个&lt;code class=&quot;prettyprint&quot;&gt;AssertionError&lt;/code&gt;重新抛出。)&lt;/p&gt;

&lt;p&gt;如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleNumericResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumberFormatException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// it&amp;#39;s not numeric; that&amp;#39;s fine, just continue&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleTextResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;例外&lt;/strong&gt;：在测试中，如果一个捕获的异常被命名为&lt;code class=&quot;prettyprint&quot;&gt;expected&lt;/code&gt;，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常，
因此在这里就没有必要加注释。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;emptyStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoSuchElementException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;6-3-静态成员：使用类进行调用&quot;&gt;6.3 静态成员：使用类进行调用&lt;/h3&gt;

&lt;p&gt;使用类名调用静态的类成员，而不是具体某个对象或表达式。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aFoo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aStaticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// good&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aStaticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// bad&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;somethingThatYieldsAFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;aStaticMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// very bad&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;6-4-finalizers-禁用&quot;&gt;6.4 Finalizers: 禁用&lt;/h3&gt;

&lt;p&gt;极少会去重载&lt;code class=&quot;prettyprint&quot;&gt;Object.finalize&lt;/code&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解&lt;a href=&quot;http://books.google.com/books?isbn=8131726592&quot;&gt;Effective
Java&lt;/a&gt; 第7条款：“Avoid
Finalizers”，然后不要使用它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;javadoc&quot;&gt;Javadoc&lt;/h2&gt;

&lt;h3 id=&quot;7-1-格式&quot;&gt;7.1 格式&lt;/h3&gt;

&lt;h4 id=&quot;7-1-1-一般形式&quot;&gt;7.1.1 一般形式&lt;/h4&gt;

&lt;p&gt;Javadoc块的基本格式如下所示：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * Multiple lines of Javadoc text are written here,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * wrapped normally...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;或者是以下单行形式：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** An especially short bit of Javadoc. */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。&lt;/p&gt;

&lt;h4 id=&quot;7-1-2-段落&quot;&gt;7.1.2 段落&lt;/h4&gt;

&lt;p&gt;空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。
除了第一个段落，每个段落第一个单词前都有标签&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt;，并且它和第一个单词间没有空格。&lt;/p&gt;

&lt;h4 id=&quot;7-1-3-javadoc标记&quot;&gt;7.1.3 Javadoc标记&lt;/h4&gt;

&lt;p&gt;标准的Javadoc标记按以下顺序出现：&lt;code class=&quot;prettyprint&quot;&gt;@param&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;@return&lt;/code&gt;, &lt;code class=&quot;prettyprint&quot;&gt;@throws&lt;/code&gt;,
&lt;code class=&quot;prettyprint&quot;&gt;@deprecated&lt;/code&gt;, 前面这4种标记如果出现，描述都不能为空。
当描述无法在一行中容纳，连续行需要至少再缩进4个空格。&lt;/p&gt;

&lt;h3 id=&quot;7-2-摘要片段&quot;&gt;7.2 摘要片段&lt;/h3&gt;

&lt;p&gt;每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。&lt;/p&gt;

&lt;p&gt;这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以&lt;code class=&quot;prettyprint&quot;&gt;A {@code Foo} is a...&lt;/code&gt;或&lt;code class=&quot;prettyprint&quot;&gt;This method returns...&lt;/code&gt;开头,
它也不会是一个完整的祈使句，如&lt;code class=&quot;prettyprint&quot;&gt;Save the record...&lt;/code&gt;。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip：一个常见的错误是把简单的Javadoc写成&lt;code class=&quot;prettyprint&quot;&gt;/** @return the customer ID */&lt;/code&gt;，这是不正确的。它应该写成&lt;code class=&quot;prettyprint&quot;&gt;/** Returns the customer ID. */&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;7-3-哪里需要使用javadoc&quot;&gt;7.3 哪里需要使用Javadoc&lt;/h3&gt;

&lt;p&gt;至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外：&lt;/p&gt;

&lt;h4 id=&quot;7-3-1-例外：不言自明的方法&quot;&gt;7.3.1 例外：不言自明的方法&lt;/h4&gt;

&lt;p&gt;对于简单明显的方法如&lt;code class=&quot;prettyprint&quot;&gt;getFoo&lt;/code&gt;，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns
the foo”，确实也没有什么值得写了。&lt;/p&gt;

&lt;p&gt;单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名&lt;code class=&quot;prettyprint&quot;&gt;getCanonicalName&lt;/code&gt;，
就不应该忽视文档说明，因为读者很可能不知道词语&lt;code class=&quot;prettyprint&quot;&gt;canonical name&lt;/code&gt;指的是什么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;7-3-2-例外：重载&quot;&gt;7.3.2 例外：重载&lt;/h4&gt;

&lt;p&gt;如果一个方法重载了超类中的方法，那么Javadoc并非必需的。&lt;/p&gt;

&lt;h4 id=&quot;7-3-3-可选的javadoc&quot;&gt;7.3.3 可选的Javadoc&lt;/h4&gt;

&lt;p&gt;对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为，
那么这个注释应该写成Javadoc，这样更统一更友好。&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;本文档翻译自&lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/javaguide.html&quot;&gt;Google Java Style&lt;/a&gt;，
译者&lt;a href=&quot;http://weibo.com/hawstein&quot;&gt;@Hawstein&lt;/a&gt;。&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Sep 2015 00:00:00 +0800</pubDate>
        <link>http://hhlucky.github.io/2015-09-30/Google-java-style/</link>
        <guid isPermaLink="true">http://hhlucky.github.io/2015-09-30/Google-java-style/</guid>
        
        
      </item>
    
      <item>
        <title>Linux下查看系统信息</title>
        <description>&lt;p&gt;查看当前操作系统内核信息&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;uname -a
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; Linux redcat 2.6.31-20-generic &lt;span class=&quot;c&quot;&gt;#58-Ubuntu SMP Fri Mar 12 05:23:09 UTC 2010 i686 GNU/Linux&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看当前操作系统发行版信息&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cat&lt;/span&gt; /etc/issue
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; Ubuntu 9.10 &lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;查看cpu型号&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat /proc/cpuinfo &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep name &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -f2 -d: &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -c
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;  Intel&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;R&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Core&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; Duo CPU     P8600  @ 2.40GHz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(看到有2个逻辑CPU, 也知道了CPU型号)&lt;/p&gt;

&lt;p&gt;查看物理cpu颗数&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat /proc/cpuinfo &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep physical &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -c
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; physical id    : 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(说明实际上是1颗2核的CPU)&lt;/p&gt;

&lt;p&gt;查看cpu运行模式&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;getconf LONG_BIT
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 32&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(说明当前CPU运行在32bit模式下, 但不代表CPU不支持64bit)&lt;/p&gt;

&lt;p&gt;查看cpu是否支持64bit&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat /proc/cpuinfo &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep flags &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39; lm &amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; wc -l
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit)&lt;/p&gt;

&lt;p&gt;查看cpu信息概要（昨天看aix的时候刚发现的，在ubuntu上竟然也有~）：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lscpu&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; Architecture:          i686                            &lt;span class=&quot;c&quot;&gt;#架构686&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; CPU&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:                &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;                                   &lt;span class=&quot;c&quot;&gt;#逻辑cpu颗数是2&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; Thread&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; per core:    &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;                           &lt;span class=&quot;c&quot;&gt;#每个核心线程数是1                 &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; Core&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; per socket:    &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;                           &lt;span class=&quot;c&quot;&gt;#每个cpu插槽核数/每颗物理cpu核数是2&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; CPU socket&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:         &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;                            &lt;span class=&quot;c&quot;&gt;#cpu插槽数是1&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; Vendor ID:             GenuineIntel           &lt;span class=&quot;c&quot;&gt;#cpu厂商ID是GenuineIntel&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; CPU family:            &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;                              &lt;span class=&quot;c&quot;&gt;#cpu系列是6&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; Model:                 &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;                                &lt;span class=&quot;c&quot;&gt;#型号23&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; Stepping:              &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;                              &lt;span class=&quot;c&quot;&gt;#步进是10&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; CPU MHz:               800.000                 &lt;span class=&quot;c&quot;&gt;#cpu主频是800MHz&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; Virtualization:        VT-x                         &lt;span class=&quot;c&quot;&gt;#cpu支持的虚拟化技术VT-x(对此在下一博文中解释下http://hi.baidu.com/sdusoul/blog/item/5d8e0488def3a998a5c272c0.html)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; L1d cache:             32K                         &lt;span class=&quot;c&quot;&gt;#一级缓存32K（google了下，这具体表示表示cpu的L1数据缓存为32k）&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; L1i cache:             32K                          &lt;span class=&quot;c&quot;&gt;#一级缓存32K（具体为L1指令缓存为32K）&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; L2 cache:              3072K                      &lt;span class=&quot;c&quot;&gt;#二级缓存3072K&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;最后来个大而全的：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cat&lt;/span&gt; /proc/cpuinfo
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; processor    : 0
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; vendor_id    : GenuineIntel
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; cpu family    : 6
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; model        : 23
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; model name    : Intel&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;R&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Core&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; Duo CPU     P8600  @ 2.40GHz
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; stepping    : 10
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; cpu MHz        : 800.000
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; cache size    : &lt;span class=&quot;m&quot;&gt;3072&lt;/span&gt; KB
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; physical id    : 0
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; siblings    : 2
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; core id        : 0
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; cpu cores    : 2
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; apicid        : 0
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; initial apicid    : 0
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; fdiv_bug    : no
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; hlt_bug        : no
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; f00f_bug    : no
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; coma_bug    : no
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; fpu        : yes
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; fpu_exception    : yes
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt; cpuid level    : 13
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt; wp        : yes
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt; flags        : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe nx lm constant_tsc arch_perfmon pebs bts pni dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 xsave lahf_lm ida tpr_shadow vnmi flexpriority
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt; bogomips    : 4788.60
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; clflush size    : 64
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt; power management:
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt; processor    : 1
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt; vendor_id    : GenuineIntel
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt; cpu family    : 6
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt; model        : 23
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt; model name    : Intel&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;R&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Core&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; Duo CPU     P8600  @ 2.40GHz
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt; stepping    : 10
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt; cpu MHz        : 800.000
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt; cache size    : &lt;span class=&quot;m&quot;&gt;3072&lt;/span&gt; KB
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt; physical id    : 0
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt; siblings    : 2
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt; core id        : 1
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt; cpu cores    : 2
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt; apicid        : 1
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt; initial apicid    : 1
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt; fdiv_bug    : no
&lt;span class=&quot;lineno&quot;&gt;44&lt;/span&gt; hlt_bug        : no
&lt;span class=&quot;lineno&quot;&gt;45&lt;/span&gt; f00f_bug    : no
&lt;span class=&quot;lineno&quot;&gt;46&lt;/span&gt; coma_bug    : no
&lt;span class=&quot;lineno&quot;&gt;47&lt;/span&gt; fpu        : yes
&lt;span class=&quot;lineno&quot;&gt;48&lt;/span&gt; fpu_exception    : yes
&lt;span class=&quot;lineno&quot;&gt;49&lt;/span&gt; cpuid level    : 13
&lt;span class=&quot;lineno&quot;&gt;50&lt;/span&gt; wp        : yes
&lt;span class=&quot;lineno&quot;&gt;51&lt;/span&gt; flags        : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe nx lm constant_tsc arch_perfmon pebs bts pni dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 xsave lahf_lm ida tpr_shadow vnmi flexpriority
&lt;span class=&quot;lineno&quot;&gt;52&lt;/span&gt; bogomips    : 4787.96
&lt;span class=&quot;lineno&quot;&gt;53&lt;/span&gt; clflush size    : 64
&lt;span class=&quot;lineno&quot;&gt;54&lt;/span&gt; power management:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 14 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://hhlucky.github.io/2015-08-14/linux/</link>
        <guid isPermaLink="true">http://hhlucky.github.io/2015-08-14/linux/</guid>
        
        <category>linux</category>
        
        <category>system</category>
        
        
      </item>
    
      <item>
        <title>Markdown's Formatting Syntax</title>
        <description>&lt;p&gt;&amp;lt;&amp;lt; &lt;a href=&quot;http://wowubuntu.com&quot;&gt;访问 Wow!Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt; 这份文档派生(fork)于&lt;a href=&quot;http://markdown.tw/&quot;&gt;繁体中文版&lt;/a&gt;，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里&lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/basics.md&quot;&gt;查看它的源文件&lt;/a&gt;。「繁体中文版的原始文件可以&lt;a href=&quot;https://github.com/othree/markdown-syntax-zhtw/blob/master/basics.md&quot;&gt;查看这里&lt;/a&gt;」--By @&lt;a href=&quot;http://twitter.com/riku&quot;&gt;riku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本项目托管于 &lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/&quot;&gt;GitCafe&lt;/a&gt;上，请通过&lt;q&gt;派生&lt;/q&gt;和&lt;q&gt;合并请求&lt;/q&gt;来帮忙改进本项目。&lt;/p&gt;

&lt;h1 id=&quot;markdown-basics-（快速入门）-点击查看完整语法说明&quot;&gt;Markdown: Basics （快速入门） / (&lt;a href=&quot;./index.html&quot;&gt;点击查看完整语法说明&lt;/a&gt;)&lt;/h1&gt;

&lt;h2 id=&quot;getting-the-gist-of-markdown-39-s-formatting-syntax&quot;&gt;Getting the Gist of Markdown&amp;#39;s Formatting Syntax&lt;/h2&gt;

&lt;p&gt;此页提供了 Markdown 的简单概念， &lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md&quot; title=&quot;Markdown Syntax&quot;&gt;语法说明&lt;/a&gt; 页提供了完整详细的文档，说明了每项功能。但是 Markdown 其实很简单就可以上手，此页文档提供了一些范例，并且每个范例都会提供输出的 HTML 结果。&lt;/p&gt;

&lt;p&gt;其实直接试试看也是一个很不错的方法， &lt;a href=&quot;http://daringfireball.net/projects/markdown/dingus&quot; title=&quot;Markdown Dingus&quot;&gt;Dingus&lt;/a&gt; 是一个网页应用程序，你可以把自已编写的 Markdown 文档转成 XHTML。&lt;/p&gt;

&lt;h2 id=&quot;段落、标题、区块代码&quot;&gt;段落、标题、区块代码&lt;/h2&gt;

&lt;p&gt;一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，就被视为空行，例如有一行只有空白和 tab，那该行也会被视为空行），一般的段落不需要用空白或换行缩进。&lt;/p&gt;

&lt;p&gt;Markdown 支持两种标题的语法，&lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt; 和 &lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt; 形式。Setext 形式是用底线的形式，利用 &lt;code class=&quot;prettyprint&quot;&gt;=&lt;/code&gt; （最高阶标题）和 &lt;code class=&quot;prettyprint&quot;&gt;-&lt;/code&gt; （第二阶标题），Atx 形式在行首插入 1 到 6 个 &lt;code class=&quot;prettyprint&quot;&gt;#&lt;/code&gt; ，对应到标题 1 到 6 阶。&lt;/p&gt;

&lt;p&gt;区块引用则使用 email 形式的 &amp;#39;&lt;code class=&quot;prettyprint&quot;&gt;&amp;gt;&lt;/code&gt;&amp;#39; 角括号。&lt;/p&gt;

&lt;p&gt;Markdown 语法:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A First Level Header
====================
A Second Level Header
---------------------

Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.

The quick brown fox jumped over the lazy
dog&amp;#39;s back.
### Header 3

&amp;gt; This is a blockquote.
&amp;gt; 
&amp;gt; This is the second paragraph in the blockquote.
&amp;gt;
&amp;gt; ## This is an H2 in a blockquote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;h1&amp;gt;A First Level Header&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;A Second Level Header&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Now is the time for all good men to come to
the aid of their country. This is just a
regular paragraph.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The quick brown fox jumped over the lazy
dog&amp;#39;s back.&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Header 3&amp;lt;/h3&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;This is a blockquote.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This is the second paragraph in the blockquote.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;This is an H2 in a blockquote&amp;lt;/h2&amp;gt;
&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;修辞和强调&quot;&gt;修辞和强调&lt;/h3&gt;

&lt;p&gt;Markdown 使用星号和底线来标记需要强调的区段。&lt;/p&gt;

&lt;p&gt;Markdown 语法:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Some of these words *are emphasized*.
Some of these words _are emphasized also_.
Use two asterisks for **strong emphasis**.
Or, if you prefer, __use two underscores instead__.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出 HTML 为:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p&amp;gt;Some of these words &amp;lt;em&amp;gt;are emphasized&amp;lt;/em&amp;gt;.
Some of these words &amp;lt;em&amp;gt;are emphasized also&amp;lt;/em&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Use two asterisks for &amp;lt;strong&amp;gt;strong emphasis&amp;lt;/strong&amp;gt;.
Or, if you prefer, &amp;lt;strong&amp;gt;use two underscores instead&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;列表&quot;&gt;列表&lt;/h2&gt;

&lt;p&gt;无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;* Candy.
* Gum.
* Booze.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;加号：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;+ Candy.
+ Gum.
+ Booze.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和减号&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- Candy.
- Gum.
- Booze.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;都会输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Candy.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Gum.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Booze.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有序的列表则是使用一般的数字接着一个英文句点作为项目标记：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1. Red
2. Green
3. Blue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Red&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Green&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Blue&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你在项目之间插入空行，那项目的内容会用 &lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;* A list item.

    With multiple paragraphs.

* Another item in the list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;A list item.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With multiple paragraphs.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Another item in the list.&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;链接&quot;&gt;链接&lt;/h3&gt;

&lt;p&gt;Markdown 支援两种形式的链接语法： &lt;em&gt;行内&lt;/em&gt; 和 &lt;em&gt;参考&lt;/em&gt; 两种形式，两种都是使用角括号来把文字转成连结。&lt;/p&gt;

&lt;p&gt;行内形式是直接在后面用括号直接接上链接：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;This is an [example link](http://example.com/).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p&amp;gt;This is an &amp;lt;a href=&amp;quot;http://example.com/&amp;quot;&amp;gt;
example link&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你也可以选择性的加上 title 属性：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;This is an [example link](http://example.com/ &amp;quot;With a Title&amp;quot;).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p&amp;gt;This is an &amp;lt;a href=&amp;quot;http://example.com/&amp;quot; title=&amp;quot;With a Title&amp;quot;&amp;gt;
example link&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;I get 10 times more traffic from [Google][1] than from
[Yahoo][2] or [MSN][3].

[1]: http://google.com/ &amp;quot;Google&amp;quot;
[2]: http://search.yahoo.com/ &amp;quot;Yahoo Search&amp;quot;
[3]: http://search.msn.com/ &amp;quot;MSN Search&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p&amp;gt;I get 10 times more traffic from &amp;lt;a href=&amp;quot;http://google.com/&amp;quot;
title=&amp;quot;Google&amp;quot;&amp;gt;Google&amp;lt;/a&amp;gt; than from &amp;lt;a href=&amp;quot;http://search.yahoo.com/&amp;quot;
title=&amp;quot;Yahoo Search&amp;quot;&amp;gt;Yahoo&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://search.msn.com/&amp;quot;
title=&amp;quot;MSN Search&amp;quot;&amp;gt;MSN&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;I start my morning with a cup of coffee and
[The New York Times][NY Times].

[ny times]: http://www.nytimes.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p&amp;gt;I start my morning with a cup of coffee and
&amp;lt;a href=&amp;quot;http://www.nytimes.com/&amp;quot;&amp;gt;The New York Times&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;图片&quot;&gt;图片&lt;/h3&gt;

&lt;p&gt;图片的语法和链接很像。&lt;/p&gt;

&lt;p&gt;行内形式（title 是选择性的）：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;![alt text](/path/to/img.jpg &amp;quot;Title&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考形式：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;![alt text][id]

[id]: /path/to/img.jpg &amp;quot;Title&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面两种方法都会输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;img src=&amp;quot;/path/to/img.jpg&amp;quot; alt=&amp;quot;alt text&amp;quot; title=&amp;quot;Title&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;代码&quot;&gt;代码&lt;/h3&gt;

&lt;p&gt;在一般的段落文字中，你可以使用反引号 &lt;code class=&quot;prettyprint&quot;&gt;`&lt;/code&gt; 来标记代码区段，区段内的 &lt;code class=&quot;prettyprint&quot;&gt;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;&lt;/code&gt; 和 &lt;code class=&quot;prettyprint&quot;&gt;&amp;gt;&lt;/code&gt; 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;I strongly recommend against using any `&amp;lt;blink&amp;gt;` tags.

I wish SmartyPants used named entities like `&amp;amp;mdash;`
instead of decimal-encoded entites like `&amp;amp;#8212;`.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p&amp;gt;I strongly recommend against using any
&amp;lt;code&amp;gt;&amp;amp;lt;blink&amp;amp;gt;&amp;lt;/code&amp;gt; tags.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I wish SmartyPants used named entities like
&amp;lt;code&amp;gt;&amp;amp;amp;mdash;&amp;lt;/code&amp;gt; instead of decimal-encoded
entites like &amp;lt;code&amp;gt;&amp;amp;amp;#8212;&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 &lt;code class=&quot;prettyprint&quot;&gt;&amp;amp;&lt;/code&gt;、&lt;code class=&quot;prettyprint&quot;&gt;&amp;lt;&lt;/code&gt; 和 &lt;code class=&quot;prettyprint&quot;&gt;&amp;gt;&lt;/code&gt; 也一样会自动转成 HTML 实体。&lt;/p&gt;

&lt;p&gt;Markdown 语法:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;If you want your page to validate under XHTML 1.0 Strict,
you&amp;#39;ve got to put paragraph tags in your blockquotes:

&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出 HTML 为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p&amp;gt;If you want your page to validate under XHTML 1.0 Strict,
you&amp;#39;ve got to put paragraph tags in your blockquotes:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;blockquote&amp;amp;gt;
&amp;amp;lt;p&amp;amp;gt;For example.&amp;amp;lt;/p&amp;amp;gt;
&amp;amp;lt;/blockquote&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Wed, 12 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://hhlucky.github.io/2015-08-12/markdown-basics/</link>
        <guid isPermaLink="true">http://hhlucky.github.io/2015-08-12/markdown-basics/</guid>
        
        <category>markdown</category>
        
        
      </item>
    
      <item>
        <title>Linux PAHT Setting</title>
        <description>&lt;h2 id=&quot;ubuntu-linux-环境变量path设置&quot;&gt;Ubuntu Linux 环境变量PATH设置&lt;/h2&gt;

&lt;h3 id=&quot;ubuntu-linux系统环境变量配置文件：&quot;&gt;Ubuntu Linux系统环境变量配置文件：&lt;/h3&gt;

&lt;p&gt;/etc/profile : 在登录时,操作系统定制用户环境时使用的第一个文件 ,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。 &lt;/p&gt;

&lt;p&gt;/etc /environment : 在登录时操作系统使用的第二个文件, 系统在读取你自己的profile前,设置环境文件的环境变量。 &lt;/p&gt;

&lt;p&gt;~/.profile :  在登录时用到的第三个文件 是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。&lt;/p&gt;

&lt;p&gt;/etc/bashrc : 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取. &lt;/p&gt;

&lt;p&gt;~/.bashrc : 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。 &lt;/p&gt;

&lt;h3 id=&quot;pash环境变量的设置方法：&quot;&gt;PASH环境变量的设置方法：&lt;/h3&gt;

&lt;h4 id=&quot;方法一：用户主目录下的-profile或-bashrc文件（推荐）&quot;&gt;方法一：用户主目录下的.profile或.bashrc文件（推荐）&lt;/h4&gt;

&lt;p&gt;登录到你的用户（非root），在终端输入： &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gedit ~/.profile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;or .bashrc&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以在此文件末尾加入PATH的设置如下： &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;”&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:your path1:your path2 ...”&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;保存文件，注销再登录，变量生效。 
该方式添加的变量只对当前用户有效。 &lt;/p&gt;

&lt;h4 id=&quot;方法二：系统目录下的profile文件（谨慎）&quot;&gt;方法二：系统目录下的profile文件（谨慎）&lt;/h4&gt;

&lt;p&gt;在系统的etc目录下，有一个profile文件，编辑该文件： &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gedit /etc/profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在最后加入PATH的设置如下： &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;”&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:your path1:your path2 ...”&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;该文件编辑保存后，重启系统，变量生效。 
该方式添加的变量对所有的用户都有效。 &lt;/p&gt;

&lt;h4 id=&quot;方法三：系统目录下的-environment-文件（谨慎）&quot;&gt;方法三：系统目录下的 environment 文件（谨慎）&lt;/h4&gt;

&lt;p&gt;在系统的etc目录下，有一个environment文件，编辑该文件： &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gedit /etc/environment&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;找到以下的 PATH 变量： 
PATH=&lt;q&gt;&lt;......&gt;&lt;/q&gt; 
修改该 PATH 变量，在其中加入自己的path即可，例如： 
PATH=&lt;q&gt;&lt;......&gt;:your path1:your path2 …&lt;/q&gt; 
各个path之间用冒号分割。该文件也是重启生效，影响所有用户。 
注意这里不是添加export PATH=… 。 &lt;/p&gt;

&lt;h4 id=&quot;方法四：直接在终端下输入&quot;&gt;方法四：直接在终端下输入&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$PATH:your path1:your path2 …&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这种方式变量立即生效，但用户注销或系统重启后设置变成无效，适合临时变量的设置。 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注 意：方法二和三的修改需要谨慎，尤其是通过root用户修改，如果修改错误，将可能导致一些严重的系统错误。因此笔者推荐使用第一种方法。另外嵌入式 Linux的开发最好不要在root下进行（除非你对Linux已经非常熟悉了！！），以免因为操作不当导致系统严重错误。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是一个对environment文件错误修改导致的问题以及解决方法示例： &lt;/p&gt;

&lt;p&gt;问题：因为不小心在 etc/environment里设在环境变量导致无法登录 
提示：不要在 etc/environment里设置 export PATH这样会导致重启后登录不了系统 
解决方法： 
在登录界面 alt +ctrl+f1进入命令模式，如果不是root用户需要键入（root用户就不许这么罗嗦，gedit编辑会不可显示） 
/usr/bin/sudo /usr/bin/vi /etc/environment 
光标移到export PATH** 行，连续按 d两次删除该行； 
输入:wq保存退出； 
然后键入/sbin/reboot重启系统（可能会提示need to boot，此时直接power off）&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://hhlucky.github.io/2015-08-11/linux-path-setting/</link>
        <guid isPermaLink="true">http://hhlucky.github.io/2015-08-11/linux-path-setting/</guid>
        
        <category>linux</category>
        
        <category>system</category>
        
        <category>path</category>
        
        
      </item>
    
      <item>
        <title>Spring Learning</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/spring_learning_images/ioc_interface.jpg&quot; alt=&quot;Spring Ioc interface design&quot; title=&quot;Spring Ioc interface design&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从接口BeanFactory到HierarchicalBeanFactory，再到ConfigurableBeanFactory，是一条主要的BeanFactory设计路径。在这条接口设计路径中，BeanFactory接口定义了基本的IoC容器的规范。在这个接口定义中，包括了getBean()这样的IoC容器的基本方法（通过这个方法可以从容器中取得Bean）。而HierarchicalBeanFactory接口在继承了BeanFactory的基本接口之后，增加了getParentBeanFactory()的接口功能，使BeanFactory具备了双亲IoC容器的管理功能。在接下来的ConfigurableBeanFactory接口中，主要定义了一些对BeanFactory的配置功能，比如通过setParentBeanFactory()设置双亲IoC容器，通过addBeanPostProcessor()配置Bean后置处理器，等等。通过这些接口设计的叠加，定义了BeanFactory就是简单IoC容器的基本功能。关于BeanFactory简单IoC容器的设计，我们会在后面的内容中详细介绍。&lt;/li&gt;
&lt;li&gt;第二条接口设计主线是，以ApplicationContext应用上下文接口为核心的接口设计，这里涉及的主要接口设计有，从BeanFactory到ListableBeanFactory，再到ApplicationContext，再到我们常用的WebApplicationContext或者ConfigurableApplicationContext接口。我们常用的应用上下文基本上都是ConfigurableApplicationContext或者WebApplicationContext的实现。在这个接口体系中，ListableBeanFactory和HierarchicalBeanFactory两个接口，连接BeanFactory接口定义和ApplicationConext应用上下文的接口定义。在ListableBeanFactory接口中，细化了许多BeanFactory的接口功能，比如定义了getBeanDefinitionNames()接口方法；对于HierarchicalBeanFactory接口，我们在前文中已经提到过；对于ApplicationContext接口，它通过继承MessageSource、ResourceLoader、ApplicationEventPublisher接口，在BeanFactory简单IoC容器的基础上添加了许多对高级容器的特性的支持。&lt;/li&gt;
&lt;li&gt;这里涉及的是主要接口关系，而具体的IoC容器都是在这个接口体系下实现的，比如DefaultListableBeanFactory，这个基本IoC容器的实现就是实现了ConfigurableBeanFactory，从而成为一个简单IoC容器的实现。像其他IoC容器，比如XmlBeanFactory，都是在DefaultListableBeanFactory的基础上做扩展，同样地，ApplicationContext的实现也是如此。&lt;/li&gt;
&lt;li&gt;这个接口系统是以BeanFactory和ApplicationContext为核心的。而BeanFactory又是IoC容器的最基本接口，在ApplicationContext的设计中，一方面，可以看到它继承了BeanFactory接口体系中的ListableBeanFactory、AutowireCapableBeanFactory、HierarchicalBeanFactory等BeanFactory的接口，具备了BeanFactory IoC容器的基本功能；另一方面，通过继承MessageSource、ResourceLoadr、ApplicationEventPublisher这些接口，BeanFactory为ApplicationContext赋予了更高级的IoC容器特性。对于ApplicationContext而言，为了在Web环境中使用它，还设计了WebApplicationContext接口，而这个接口通过继承ThemeSource接口来扩充功能。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 10 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://hhlucky.github.io/2015-08-10/spring-learning/</link>
        <guid isPermaLink="true">http://hhlucky.github.io/2015-08-10/spring-learning/</guid>
        
        <category>java</category>
        
        <category>spring</category>
        
        
      </item>
    
      <item>
        <title>让pandoc输出pdf时支持中文</title>
        <description>&lt;p&gt;主机环境为：Ubuntu 12.04 LTS。对于RH系列，yum安装包的名称可能会有不同，不过yum联想能力比较强，应该不是问题。&lt;/p&gt;

&lt;h3 id=&quot;安装pandoc，安装tex-live&quot;&gt;安装pandoc，安装tex-live&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; apt-get install pandoc texlive texlive-latex-extra texlive-latex-recommanded&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意，如果要用beamer生成幻灯片的话，则要从cabal安装。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; apt-get install cabal-install
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; cabal update
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; cabal install pandoc
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export PATH=&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.cabal/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装中文字体&quot;&gt;安装中文字体&lt;/h3&gt;

&lt;p&gt;可以用“fc-list&amp;quot;命令查看已安装字体。使用如下命令安装gnome中文字体。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; apt-get install apt-get install language-pack-gnome-zh*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果有ttf文件，比如Windows的字体文件在（Windows\fonts）下，双击即可安装。&lt;/p&gt;

&lt;h3 id=&quot;自定义latex模板&quot;&gt;自定义latex模板&lt;/h3&gt;

&lt;p&gt;使用下面命令将pandoc标准模板导出：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; pandoc -D latex &amp;gt; template.tex&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在模板中找到&lt;q&gt;% if luatex or xetex&lt;/q&gt;，在该语句下面插入如下代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; % SUPPORT &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; Chinese
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;sepackage&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;boldfont,slantfont,CJKsetspaces,CJKchecksingle&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;xeCJK&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;sepackage&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;fontspec,xltxtra,xunicode&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;efaultfontfeatures&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Mapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tex-text,Scale&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;MatchLowercase&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\p&lt;/span&gt;unctstyle&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;quanjiao&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;etCJKmainfont&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;文泉驿微米黑&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;etCJKsansfont&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;KaiTi&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;etCJKmonofont&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;SimSun&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中&lt;q&gt;\setCJKmainfont&lt;/q&gt;设置字体部分，根据系统已安装字体自行修改。&lt;/p&gt;

&lt;h3 id=&quot;配置pandoc命令参数&quot;&gt;配置pandoc命令参数&lt;/h3&gt;

&lt;p&gt;在.bashrc下添加如下代码&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pandoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pandoc --template=$HOME/Templates/template.tex --latex-engine=xelatex&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中，template参数表示pandoc使用的自定义模板路径，我将它放在~/Templates下。&lt;/p&gt;

&lt;p&gt;使用xelatex作为latex引擎，它可以直接使用系统已安装的字体，非常方便。&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://hhlucky.github.io/2015-08-10/pandoc-output-pdf/</link>
        <guid isPermaLink="true">http://hhlucky.github.io/2015-08-10/pandoc-output-pdf/</guid>
        
        <category>pandoc</category>
        
        
      </item>
    
      <item>
        <title>Project Manage Experience Summery</title>
        <description>&lt;p&gt;近期，好屋中国官网app项目（下称“官网app”）如期上线，项目一期正式告一段落。这一期官网app项目核心是一个面向C端用户的新房二手房交易app，工作量也主要集中在app及其后台服务。但这一期项目相关联的系统及业务却非常广泛，包括HOSS、合伙人app、内部合伙人、外部合伙人、助理宝、抢钱宝，基本上关于新房二手房各个产品线上的产品和系统都有新增需求和业务变更，整个工程的复杂度可想而知。系统的设计开发测试及上线准备持续大约一个月，执行过程也遇到了大大小小的包括技术、业务、管理等等各种问题，但总的来说比较顺利，产品质量也比较高。这与各个小组成员的辛勤劳动和密切配合是密不可分。这期项目中，我带领官网app和合伙人app（包括助理宝、抢钱宝等）团队，主要完成了官网app后台（包括官网app运营）及合伙人（包括内部合伙人
外部合伙人）、助理宝、抢钱宝和抢客宝的新系统研发及已有系统的变更和维护。团队人数12个人以上，其中有一半以上成员是刚加入的新员工，时间紧，任务重；另外，第一次集成单点登录，第一次通过公共服务集成在线支付；再加上，项目过程中，合伙人及助理宝业务需求并行开发和上线。团队大，业务复杂，对我来说都是第一次，因此，要管理好团队按时保质保量按时上线，对我也是不小的挑战。在此，我对这次项目做一个小小的总结，总结经验，以为下一次项目执行更臻完善；吸取教训，以防再犯同样的错误。&lt;/p&gt;

&lt;h2 id=&quot;经验总结&quot;&gt;经验总结&lt;/h2&gt;

&lt;h3 id=&quot;充分发挥团队的力量&quot;&gt;充分发挥团队的力量&lt;/h3&gt;

&lt;p&gt;1.充满信心的将工作任务分配给团队成员，包括任务工作量评估、系统的设计、小组间的沟通协调等工作&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这样不但可以提高工作效率，也可以是团队成员得到综合能力的锻炼&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.通过复审和检查保证工作质量&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;通过复核和检查，并及时沟通，不但可以保证质量，可以使团队成员了解工作不足之处，失误的地方，同事能更充分的了解整个系统，不断提高工作效率和完善工作质量&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.畅所欲言，每个成员都可以提出好工作的方法，指出团队及个人的有待提高指出&lt;/p&gt;

&lt;h3 id=&quot;团队实行以新带旧的结对模式组织&quot;&gt;团队实行以新带旧的结对模式组织&lt;/h3&gt;

&lt;p&gt;首先，敏捷开发里的结对编程就是一个管理原则和工作方式，其好处不言而喻；&lt;/p&gt;

&lt;p&gt;其次，老带新，可以保证新入职员工对业务能够充分理解，并注意其中的关键点，不至于走弯路；同时，老员工也可以从新员工那里学习到解决问题的新的思路和方法；&lt;/p&gt;

&lt;p&gt;再次，可以充分发挥团队的力量，两个人组成一个小团队，分担部分的管理和沟通的工作；&lt;/p&gt;

&lt;p&gt;最后，老员工可以锻炼自己的协调沟通甚至是管理方法的能力。&lt;/p&gt;

&lt;h3 id=&quot;保持上下左右四面八方及时沟通&quot;&gt;保持上下左右四面八方及时沟通&lt;/h3&gt;

&lt;p&gt;1.&lt;strong&gt;上&lt;/strong&gt; 是指向上的沟通，无论是技术实现，业务需求，还是团队协作，沟通管理，只要我们处理不了的就要及时向上反馈，就像代码里的异常处理&lt;/p&gt;

&lt;p&gt;这样的代码最危险：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// do nothing&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;好的处理方式如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// cannot deal&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 抛出异常，上级知道如何处理&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.&lt;strong&gt;下&lt;/strong&gt; 是指向下的沟通，及时了解员工的工作进展，困难，动态以及提出的建议&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;左&lt;/strong&gt; 是指产品经理，了解不清楚的业务，业务的细化以及业务变更&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;右&lt;/strong&gt; 是指测试团队，及时了解测试团队的测试结果，同时也是了解自己的工作质量；倾听测试团队提出的意见和需求；和测试团队的讨论业务需求&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;四面八方&lt;/strong&gt; 是指其与他产品团队的沟通和交流，包括架构组、运维组、其他相关业务产品的系统交互&lt;/p&gt;

&lt;h3 id=&quot;培训和技术交流提高团队整体战斗力&quot;&gt;培训和技术交流提高团队整体战斗力&lt;/h3&gt;

&lt;p&gt;1.系统设计培训&lt;/p&gt;

&lt;p&gt;2.代码质量培训&lt;/p&gt;

&lt;p&gt;3.期待其他技术和管理方面的培训&lt;/p&gt;

&lt;h3 id=&quot;团队成员关系融洽积极主动&quot;&gt;团队成员关系融洽积极主动&lt;/h3&gt;

&lt;p&gt;1.团队成员都积极主动的工作&lt;/p&gt;

&lt;p&gt;2.面对突发的、不可预知的情况——比如对工作量增加、业务需求变复杂、工作任务重新分配等——团队成员都能主动承担，有担当&lt;/p&gt;

&lt;p&gt;3.团队成员积极提出自己的意见和看法，为提高工作效率出一把力&lt;/p&gt;

&lt;h2 id=&quot;提高和改进&quot;&gt;提高和改进&lt;/h2&gt;

&lt;h3 id=&quot;所有内容都要可控&quot;&gt;所有内容都要可控&lt;/h3&gt;

&lt;p&gt;1.公共业务服务，像部分的如短信服务，不在可控范围内；找到相关责任人，也很难推动下去&lt;/p&gt;

&lt;p&gt;2.maven、dubbo等技术，以及中心仓库，导致出来问题后解决速度慢、找不到对应负责人&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.任何技术实现，包括业务和技术框架，无死角控制&lt;/p&gt;

&lt;p&gt;2.定制统一标准，并实现文档化&lt;/p&gt;

&lt;p&gt;3.相应的工作内容落实到小组及负责人&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;标准统一一致&quot;&gt;标准统一一致&lt;/h3&gt;

&lt;p&gt;项目发展和演进过程中，系统架构、功能实现方式以及第三方框架和服务选用等方面不断改进和调整，导致的一些历史遗留问题就是公用代码实现标准不一致，比如图片上传存储和读取、地图（百度、高德）、推送（极光、百度）、数据分页接口等等不一而足。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.尽量统一公司的框架和技术体系&lt;/p&gt;

&lt;p&gt;2.注意向上兼容，定好接口&lt;/p&gt;

&lt;p&gt;3.加强控制&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;加强代码单元测试和review，提高代码质量&quot;&gt;加强代码单元测试和review，提高代码质量&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;1.加强单元测试培训&lt;/p&gt;

&lt;p&gt;2.更积极的组织代码review，并量化和建议代码review结果&lt;/p&gt;

&lt;p&gt;3.简历代码编写规范，培训并执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;希望，本次项目经验总结和分享能给大家带来帮助，也希望能提出宝贵的意见。&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://hhlucky.github.io/2015-08-09/project-manage/</link>
        <guid isPermaLink="true">http://hhlucky.github.io/2015-08-09/project-manage/</guid>
        
        <category>project</category>
        
        
      </item>
    
      <item>
        <title>Redis Learning</title>
        <description>&lt;p&gt;Redis 是一个 Key-Value 存储系统。和 Memcached 类似,它支持存储的 value 类型相对更多,包括 string(字符串)、list(链表)、set(集合)和 zset(有序集合)。这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作,而且这些操作都是原子性的。在此基础上,Redis 支持各种不同方式的排序。与 memcached 一样,为了保证效率,数据都是缓存在内存中。区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件,并且在此基础上实现了 master-slave(主从)同步。&lt;/p&gt;

&lt;h3 id=&quot;nosql介绍&quot;&gt;NoSQL介绍&lt;/h3&gt;

&lt;h3 id=&quot;数据类型&quot;&gt;数据类型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;String类型&lt;/li&gt;
&lt;li&gt; Lists 列表&lt;/li&gt;
&lt;li&gt; Sets 集合&lt;/li&gt;
&lt;li&gt; Sorted sets 有序集合&lt;/li&gt;
&lt;li&gt; Hashes 哈希表&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 19 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://hhlucky.github.io/2015-07-19/redis/</link>
        <guid isPermaLink="true">http://hhlucky.github.io/2015-07-19/redis/</guid>
        
        <category>redis</category>
        
        
      </item>
    
      <item>
        <title>Linux Learning</title>
        <description>&lt;p&gt;这是一篇关于linux常用命令的博文，主要记录我在学习中遇到的一些容易忘记的linux命令、用法以及注意点。不过，这里需要说明的是，我并不是一个linux的初学者。那么，为什么会有这篇博客呢？原因自己的linux学习基础不扎实，在有了几年linux系统使用经验后，仍然觉得力不从心。然而linux是一个优秀的且免费自由的操作系统这一点是毋庸置疑的，我当然希望自己能够更熟练、更高效的使用linux。所以，从今天开始，重新启程，从linux基础起，对linux的基础知识和用法作进一步的学习和研究，使基础的知识更扎实，同时捡起自己遗漏的知识点，并一一记录。所谓“学而时习之，不亦说乎”！&lt;/p&gt;

&lt;p&gt;而这篇博客，正是最遗漏知识点的记录，相信这也是你容易忽略的但却很重要的linux使用技巧吧！闲话少絮，我们开始吧。&lt;/p&gt;

&lt;h2 id=&quot;terminal的使用&quot;&gt;Terminal的使用&lt;/h2&gt;

&lt;h3 id=&quot;常用terminal使用技巧&quot;&gt;常用Terminal使用技巧&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ctr+P：回到上一个命令&lt;/li&gt;
&lt;li&gt;Ctr+R :快速反向查找命令&lt;/li&gt;
&lt;li&gt;Ctr+A：回到行首&lt;/li&gt;
&lt;li&gt;Ctr+E：回到行尾&lt;/li&gt;
&lt;li&gt;Ctr+D：向后删除一个字符&lt;/li&gt;
&lt;li&gt;Ctr+W：向前删除一个单词&lt;/li&gt;
&lt;li&gt;Ctr+向左：向前移动一个单词&lt;/li&gt;
&lt;li&gt;Ctr+向右：向后移动一个单词&lt;/li&gt;
&lt;li&gt;Ctr+l：清屏&lt;/li&gt;
&lt;li&gt;Ctr+u：删除光标前的所以字符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;设置命令行快捷键模式&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -o vi &lt;span class=&quot;c&quot;&gt;#linux命令行快捷键设置为vi模式&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -o emacs &lt;span class=&quot;c&quot;&gt;# inux命令行快捷键设置为emacs模式（默认模式）&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;常用命令&quot;&gt;常用命令&lt;/h2&gt;

&lt;h3 id=&quot;创建文件命令-ln&quot;&gt;创建文件命令 &lt;code class=&quot;prettyprint&quot;&gt;ln&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;ln 命令用于创建文件链接，包括软链接和硬链接&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln -s source_file dest_file &lt;span class=&quot;c&quot;&gt;#创建软链接&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ln source_file dest_file &lt;span class=&quot;c&quot;&gt;# 创建硬链接&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;软链接和硬链接的异同点如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文件的软链接类似与windows的快捷方式，对于文件的读写实际操作的是一个文件&lt;/li&gt;
&lt;li&gt;文件的硬链接是源文件的一个副本，与简单copy不同的是，硬链接的文件和源文件是数据同步的（两个文件inode是一致的，每一个正常的文件都有一个inode）&lt;/li&gt;
&lt;li&gt;另一个不同点是，硬链接是不可以夸磁盘分区的，而软链接则没有这个限制&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;用户权限命令-umask&quot;&gt;用户权限命令 &lt;code class=&quot;prettyprint&quot;&gt;umask&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;umask用于查看系统默认的创建文件的权限。umask执行的结果返回一串数字如&lt;code class=&quot;prettyprint&quot;&gt;0022&lt;/code&gt;，其中第一个0是一个权限特殊位，后面的‘0222’是用户权限位，但这是一个权限掩码值。那么，什么是权限掩码值类似与子网掩码，通过这个值来计算用户权限，计算方法是777减去022（&lt;strong&gt;对应位减，而不是算数减&lt;/strong&gt;）得到的值是755，那么对应的系统默认创建文件的权限就是&lt;code class=&quot;prettyprint&quot;&gt;rwxr-xr-r&lt;/code&gt;。不过，通常的做法不需要这么麻烦来计算，而是用如下命令：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;umask&lt;/span&gt; -S
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rwx,g&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rwx,o&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;命令执行返回结果相当明了&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意：&lt;/em&gt; linux系统有一条权限规则，那就是缺省创建的文件不能授予x（即执行）权限，所以真正创建的文件的默认权限是&lt;code class=&quot;prettyprint&quot;&gt;rw-r--r--&lt;/code&gt;
umask还可以用于修改默认创建文件权限，命令执行如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;umask &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;022&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#这里的数字是用户权限位（也是一个权限掩码值）&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;命令搜索命令which和whereis&quot;&gt;命令搜索命令&lt;code class=&quot;prettyprint&quot;&gt;which&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;whereis&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;which&lt;/code&gt;和&lt;code class=&quot;prettyprint&quot;&gt;whereis&lt;/code&gt;用于显示系统命令所在的目录，绝对路径；不同的是which可以查找命令相应的别名，而whereis可以查找命令的帮助文档位置&lt;/p&gt;

&lt;h3 id=&quot;文件搜索命令find&quot;&gt;文件搜索命令&lt;code class=&quot;prettyprint&quot;&gt;find&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;find查询的基本原则，要节省系统资源开销&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find -name file_name &lt;span class=&quot;c&quot;&gt;#根据文件名查找文件&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find -name *file_name* &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find -name file_name??? &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find -size file_size &lt;span class=&quot;c&quot;&gt;#根据文件大小查找文件，文件的大小的单位是block&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find -user file_owner &lt;span class=&quot;c&quot;&gt;#根据文件所有者进行查找&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find -type d &lt;span class=&quot;c&quot;&gt;#根据文件类型查找，f：二进制文件；d：目录；l：软链接文件&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find -inum &lt;span class=&quot;c&quot;&gt;#根据i节点（inode）查找文件&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;一般1block=512B；+ 表示大于指定大小，- 表示小于指定大小 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;按时间查找比较复杂&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;按天查找 ctime、atime、mtime&lt;/li&gt;
&lt;li&gt;按分钟查找 cmin、amin、mmin&lt;/li&gt;
&lt;li&gt;c-change 改变，表示文件的属性被修改过，比如所有者、所属组、权限等&lt;/li&gt;
&lt;li&gt;a-access 访问&lt;/li&gt;
&lt;li&gt;m-modify 修改，表示文件内容被修改过&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;-&lt;/code&gt;表示多长时间之内，&lt;code class=&quot;prettyprint&quot;&gt;+&lt;/code&gt;超过多长时间&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find /etc -mmin -120 &lt;span class=&quot;c&quot;&gt;#在/etc目录下查找120分钟内被内容修改过的文件&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;find命令可以用连接符实现多个条件组合查找文件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;-a&lt;/code&gt; and 表示逻辑与 &lt;code class=&quot;prettyprint&quot;&gt;-o&lt;/code&gt; or 表示逻辑或&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;-exec&lt;/code&gt; 使用格式为 find -name text.txt -exec [要执行替他命令] {} \;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;prettyprint&quot;&gt;-ok&lt;/code&gt; &lt;code class=&quot;prettyprint&quot;&gt;-ok&lt;/code&gt;与&lt;code class=&quot;prettyprint&quot;&gt;-exec&lt;/code&gt;的唯一区别是前者会询问确认&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find -name text.txt -exec ls -l &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#查找文件名为text.txt的文件，并列出其详细信息&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;文件搜索命令locate&quot;&gt;文件搜索命令&lt;code class=&quot;prettyprint&quot;&gt;locate&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;locate用于搜索系统中的文件，但locate是在系统文件的数据库中查找文件，所以查找文件速度非常快
我们可以手动执行&lt;code class=&quot;prettyprint&quot;&gt;updatedb&lt;/code&gt;命令更新系统文件数据库，一般是定期更新的。需要注意的是locate只在linux系统中存在，在unix系统中不存在。&lt;/p&gt;

&lt;h3 id=&quot;grep&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;grep&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;在文件里面搜索字符串匹配的行并输出。&lt;/p&gt;

&lt;h3 id=&quot;help&quot;&gt;&lt;code class=&quot;prettyprint&quot;&gt;help&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;如果用man查找不到命令帮助信息，有可能该命令是shell内置的命令。这时候就可以用help来查看该命令的帮助。&lt;/p&gt;

&lt;h3 id=&quot;打包解包压缩解压缩文件&quot;&gt;打包解包压缩解压缩文件&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;gzip&lt;/code&gt; 是一个压缩文件命令（GNU zip），gzip的两个特点&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;只能压缩文件，不能压缩文件名&lt;/li&gt;
&lt;li&gt;压缩完文件后，源文件就不存在了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;解压缩可以用命令&lt;code class=&quot;prettyprint&quot;&gt;gunzip&lt;/code&gt;命令或&lt;code class=&quot;prettyprint&quot;&gt;gzip -d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;tar&lt;/code&gt; 用于打包文件&lt;/p&gt;

&lt;p&gt;&lt;q&gt;.tar.gz&lt;/q&gt;为后缀的文件是用tar打包并用gzip压缩后的文件。代码示例&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tar -zcvf file_name.tar.gz dir_name &lt;span class=&quot;c&quot;&gt;# 将dir_name目录的文件打包压缩为file_name.tar.gz&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tar -zxvf file_name.tar.gz  &lt;span class=&quot;c&quot;&gt;# 解压缩文件file_name.tar.gz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;prettyprint&quot;&gt;file&lt;/code&gt; 命令用于判断文件的类型，比如用于判断其是否是压缩打包的文件&lt;/p&gt;

&lt;p&gt;zip 是一个windows和linux通用的文件压缩格式，&lt;code class=&quot;prettyprint&quot;&gt;zip&lt;/code&gt;可以压缩文件和目录，压缩目录是需要加-r参数,如&lt;code class=&quot;prettyprint&quot;&gt;zip -r file_name.zip /etc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;bz2 是zip的升级版，与zip的不同点是&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bz2压缩比很高&lt;/li&gt;
&lt;li&gt;bz2加&lt;code class=&quot;prettyprint&quot;&gt;-k&lt;/code&gt;选项可以保留源文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;网络命令ping&quot;&gt;网络命令&lt;code class=&quot;prettyprint&quot;&gt;ping&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ping -c &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ping次数&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ip地址&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ping -s &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;数据包大小&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ip地址&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;vi-vim使用&quot;&gt;vi/vim使用&lt;/h2&gt;

&lt;h3 id=&quot;vi的模式说明&quot;&gt;vi的模式说明&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/linux_learning_images/vi_img.png&quot; alt=&quot;vi的模式说明图&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;常用的编辑命令有&quot;&gt;常用的编辑命令有&lt;/h3&gt;

&lt;p&gt;切换到插入模式命令：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;i  最常用的切换到插入模式命令&lt;/li&gt;
&lt;li&gt;a  也能切换到插入模式，确切地讲是在光标后面增加内容&lt;/li&gt;
&lt;li&gt;I  切换到插入模式，并且插入的内容在光标所在行的行首&lt;/li&gt;
&lt;li&gt;A  切换到插入模式，并且插入的内容在光标所在行的行末&lt;/li&gt;
&lt;li&gt;o  小写字母o，在光标所在行的下面插入一个空行，2o表示插入两个空行&lt;/li&gt;
&lt;li&gt;O  大写字母O，在光标所在行的上面插入一个空行，2O表示插入两个空行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;清除文本命令（命令模式）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cc 改变整行，即将整行内容清掉，同时进入编辑模式&lt;/li&gt;
&lt;li&gt;C  从光标开始直至行末的内容被清掉，同时进入编辑模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;替换文本命令（命令模式）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;r  将光标处的字符替换，然后自动切回命令模式&lt;/li&gt;
&lt;li&gt;R  从光标处开始字符替换，直到按Esc才切回命令模式&lt;/li&gt;
&lt;li&gt;s  替换光标所在处的字符，可以输入任意多个字符，直到按Esc才切回命令模式，前面可以带数字，比如2s，表示替换光标处开始往右的两个字符&lt;/li&gt;
&lt;li&gt;S  替换光标所在的行，可以输入任意多个字符，直到按Esc才切回命令模式&lt;/li&gt;
&lt;li&gt;:%s/[old]/[new]/g       用字符串new替换old，/g表示全局替换，不会询问；而/c表示询问是否执行替换&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; :n1,n2s/^/#/g  &lt;span class=&quot;c&quot;&gt;#从行n1到行n1添加注释符#&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; :n1,n2s/^#//g  &lt;span class=&quot;c&quot;&gt;#删除从行n1到行n1的注释符#&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; :n1,n2s/^&lt;span class=&quot;se&quot;&gt;\/\/&lt;/span&gt;/g  &lt;span class=&quot;c&quot;&gt;#删除从行n1到行n1的注释符\\&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;删除文本命令（命令模式）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;x  删除当前光标所在的字符&lt;/li&gt;
&lt;li&gt;nx 删除当前光标开始往右的n个字符&lt;/li&gt;
&lt;li&gt;X  删除当前光标所在处往左一位的字符&lt;/li&gt;
&lt;li&gt;nX 删除当前光标左边n个字符，光标所在处的字符不会被删&lt;/li&gt;
&lt;li&gt;D  同C，但不进入编辑模式&lt;/li&gt;
&lt;li&gt;gG 删除当前行到文件末尾的所以行删除&lt;/li&gt;
&lt;li&gt;d0 删除当前行从行首到光标之间的所有字符，光标所在处的字符不会被删&lt;/li&gt;
&lt;li&gt;dd 删除当前整行&lt;/li&gt;
&lt;li&gt;:nd  删除第n行&lt;/li&gt;
&lt;li&gt;:.d   删除当前行&lt;/li&gt;
&lt;li&gt;:$d  删除最后一行&lt;/li&gt;
&lt;li&gt;:&amp;#39;ad  删除带有标记a的行&lt;/li&gt;
&lt;li&gt;:m,nd 删除第m行到第n行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;复制命令（命令模式）：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;y&lt;/li&gt;
&lt;li&gt;Y或yy 复制当前行&lt;/li&gt;
&lt;li&gt;dd 剪切当前行&lt;/li&gt;
&lt;li&gt;[n]dd 剪切当前行以下n行&lt;/li&gt;
&lt;li&gt;p或P 粘贴在当前光标所在行下或行上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;命令撤消操作&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;u   撤消最后一次修改&lt;br&gt;&lt;/li&gt;
&lt;li&gt;U   撤消当前行的所有修改&lt;/li&gt;
&lt;li&gt; .   重复最后一次修改&lt;br&gt;&lt;/li&gt;
&lt;li&gt; ,   以相反的方向重复前面的f、F、t或T查找命令 &lt;/li&gt;
&lt;li&gt; ;   重复前面的f、F、t或T查找命令&lt;br&gt;&lt;/li&gt;
&lt;li&gt; &amp;quot;np   取回最后第n次的删除(缓冲区中存有一定次数的删除内容，一般为9)&lt;/li&gt;
&lt;li&gt; n   重复前面的/或?查找命令&lt;br&gt;&lt;/li&gt;
&lt;li&gt; N  以相反方向重复前面的/或?命令&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他命令&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:wq 表示保存退出&lt;/li&gt;
&lt;li&gt;ZZ 表示保存退出&lt;/li&gt;
&lt;li&gt;:! [系统命令] 在vi里执行系统命令&lt;/li&gt;
&lt;li&gt;:r ![系统命令] 导入系统命令执行的结果&lt;/li&gt;
&lt;li&gt;:r [文件名] 导入文件名&lt;/li&gt;
&lt;li&gt;:map [快捷键] [要触发的操作] 定义快捷键&lt;/li&gt;
&lt;li&gt;:ab [简写] [实际要输入的内容] 定义一些snep&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 27 Jun 2015 00:00:00 +0800</pubDate>
        <link>http://hhlucky.github.io/2015-06-27/linux-learning/</link>
        <guid isPermaLink="true">http://hhlucky.github.io/2015-06-27/linux-learning/</guid>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>code quality improve</title>
        <description>&lt;h2 id=&quot;坏的代码&quot;&gt;坏的代码&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;重复的代码(Duplicated Code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;改善方法&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Extract Method&lt;/li&gt;
&lt;li&gt;Pull Up Method&lt;/li&gt;
&lt;li&gt;Template Mehtod&lt;/li&gt;
&lt;li&gt;Extract Class&lt;/li&gt;
&lt;li&gt;过滤器&lt;/li&gt;
&lt;li&gt;面向切面&lt;/li&gt;
&lt;li&gt;统一的异常处理&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;过长的函数(Long Method)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;每当感觉需要以注释说明点什么的时候,可以把需要说明的东西写进一个独立的函数,并以其用途命名（Extract Method）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;过大的类(Large Class)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;过长的参数列(Long Parameter List)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/code_quality_improve_images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%94%B9%E5%96%84.png&quot; alt=&quot;代码质量改善&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代码的不整洁&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;空格  换行 一行太长，太多的方法调用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/code_quality_improve_images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%94%B9%E5%96%842.png&quot; alt=&quot;代码质量改善2&quot;&gt;
&lt;img src=&quot;/img/code_quality_improve_images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%94%B9%E5%96%844.png&quot; alt=&quot;代码质量改善4&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;对比一下(执行了代码格式化后)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/code_quality_improve_images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%94%B9%E5%96%843.png&quot; alt=&quot;代码质量改善3&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;养成良好的编码习惯&lt;/li&gt;
&lt;li&gt;经常使用代码格式化&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;注意事项&quot;&gt;注意事项&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;多使用临时变量,并给临时变量取一个好的名字 意义明确&lt;/li&gt;
&lt;li&gt;使用的时候再申明临时变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/code_quality_improve_images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%94%B9%E5%96%841.png&quot; alt=&quot;代码质量改善1&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;易读&lt;/li&gt;
&lt;li&gt;节省内存&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;使用基本数据类型的对象类型&lt;/li&gt;
&lt;li&gt;分层结构体系&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/code_quality_improve_images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%94%B9%E5%96%845.png&quot; alt=&quot;代码质量改善5&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Controller 层 ：web参数处理&lt;/li&gt;
&lt;li&gt;Service层：业务逻辑&lt;/li&gt;
&lt;li&gt;Dao或Mapper层：数据增删改查&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;类和方法的职责单一&lt;/li&gt;
&lt;li&gt;多用异常返回非预期的结果,而不是返回值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/code_quality_improve_images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%94%B9%E5%96%846.png&quot; alt=&quot;代码质量改善6&quot;&gt;
&lt;img src=&quot;/img/code_quality_improve_images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%94%B9%E5%96%847.png&quot; alt=&quot;代码质量改善7&quot;&gt;
&lt;img src=&quot;/img/code_quality_improve_images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%94%B9%E5%96%848.png&quot; alt=&quot;代码质量改善8&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;让代码说明一切,而不是注释&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/code_quality_improve_images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%94%B9%E5%96%849.png&quot; alt=&quot;代码质量改善9&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;快捷操作&quot;&gt;快捷操作&lt;/h2&gt;

&lt;h3 id=&quot;下面是一些idea-快捷键和操作&quot;&gt;下面是一些idea 快捷键和操作&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Extract Method(Ctl+Alt+M)&lt;/li&gt;
&lt;li&gt;Pull Up Method(Pull Members Up/Down)&lt;/li&gt;
&lt;li&gt;Pull Up Method(SuperClass)&lt;/li&gt;
&lt;li&gt;Introduce Parameter Object(Parameter Object)&lt;/li&gt;
&lt;li&gt;代码格式化(Ctrl+Alt+L)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;持续改善&quot;&gt;持续改善&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;养成良好的编码习惯&lt;/li&gt;
&lt;li&gt;先思考和设计，再着手实现&lt;/li&gt;
&lt;li&gt;当然也要避免过度设计&lt;/li&gt;
&lt;li&gt;单元测试，测试先行&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;编写测试代码最有用的时机是在开始编程之前&lt;/li&gt;
&lt;li&gt;编写测试代码其实就是在问自己：添加这个功能需要做些什么&lt;/li&gt;
&lt;li&gt;可以使你把注意力集中于接口而不是实现&lt;/li&gt;
&lt;li&gt;单元测试的诀窍：测试你认为最容易出错的地方&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;不断重构&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;重构：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。&lt;/p&gt;

&lt;p&gt;重构本来就不应该特别拨出时间来做的事情，重构应该随时随地进行；不应该是为了重构而重构，之所以重构，是因为你想做别的事情，而重构可以帮助你把那些事情做好。&lt;/p&gt;

&lt;p&gt;以下情况可以考虑重构代码&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;添加新的功能的时候&lt;/li&gt;
&lt;li&gt;修补错误的时候&lt;/li&gt;
&lt;li&gt;复审代码的时候&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;一般的重构操作&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;重命名：对类，接口，方法，属性等重命名，以使得更易理解&lt;/li&gt;
&lt;li&gt;抽取代码：将方法内的一段代码抽取为另一个方法，以使得该段代码可以被其他方法调用，这是重构中很重要很常用的，此举可以极大的精炼代码，减少方法的代码行数&lt;/li&gt;
&lt;li&gt;封装字段：将类的某个字段转换成属性，可以更加合理的控制字段的访问&lt;/li&gt;
&lt;li&gt;抽取接口：将类的某些属性，方法抽取组成个接口，该类自动实现该接口&lt;/li&gt;
&lt;li&gt;提升方法内的局部变量为方法的参数：这主要是在写代码的过程中会使用到&lt;/li&gt;
&lt;li&gt;删除参数：将方法的一个或多个参数删掉&lt;/li&gt;
&lt;li&gt;重排参数：将方法的参数顺序重新排列
实际应用中，用的最多的是1、2、3，我们可以在写代码的时候有意识的运用代码重构，这样当我们完成编码时代码的质量也能得到保证。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;代码review&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;结对代码相互review&lt;/li&gt;
&lt;li&gt;发现问题，修改问题&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 20 Jun 2015 00:00:00 +0800</pubDate>
        <link>http://hhlucky.github.io/2015-06-20/code-quality-improve/</link>
        <guid isPermaLink="true">http://hhlucky.github.io/2015-06-20/code-quality-improve/</guid>
        
        <category>code</category>
        
        <category>quality</category>
        
        
      </item>
    
  </channel>
</rss>
