<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>my blog</title>
 <link href="http://caterpillar.github.io/atom.xml" rel="self"/>
 <id>http://caterpillar.github.io</id>
 <updated>2015-10-17T14:18:26+08:00</updated>
 <author>
   <name>Steven Lee</name>
   <uri>http://caterpillar.github.io</uri>
   <email>li_ye_hua@126.com</email>
 </author>

 

 <entry>
   <title>Google Java编程风格指南</title>
   <link href="http://caterpillar.github.io/Google-java-style"/>
   <id>http://caterpillar.github.io/Google-java-style</id>
   <updated>2015-09-30T00:00:00+08:00</updated>
   <content type="html">&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt; &lt;p&gt;这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则， 我们才认为它符合Google的Java编程风格。&lt;/p&gt; &lt;p&gt;与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题， 同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则， 对于那些不是明确强制要求的，我们尽量避免提供意见。&lt;/p&gt; &lt;h3 id=&quot;section-1&quot;&gt;1.1 术语说明&lt;/h3&gt; &lt;p&gt;在本文档中，除非另有说明：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;术语class可表示一个普通类，枚举类，接口或是annotation类型(&lt;code&gt;@interface&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;其他的术语说明会偶尔在后面的文档出现。&lt;/p&gt; &lt;h3 id=&quot;section-2&quot;&gt;1.2 指南说明&lt;/h3&gt; &lt;p&gt;本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。 示例中的格式选择不应该被强制定为规则。&lt;/p&gt; &lt;h2 id=&quot;section-3&quot;&gt;源文件基础&lt;/h2&gt; &lt;h3 id=&quot;section-4&quot;&gt;2.1 文件名&lt;/h3&gt; &lt;p&gt;源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为&lt;code&gt;.java&lt;/code&gt;。&lt;/p&gt; &lt;h3 id=&quot;utf-8&quot;&gt;2.2 文件编码：UTF-8&lt;/h3&gt; &lt;p&gt;源文件编码格式为UTF-8。&lt;/p&gt; &lt;h3 id=&quot;section-5&quot;&gt;2.3 特殊字符&lt;/h3&gt; &lt;h4 id=&quot;section-6&quot;&gt;2.3.1 空白字符&lt;/h4&gt; &lt;p&gt;除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：&lt;/p&gt; &lt;ol&gt; &lt;li&gt;所有其它字符串中的空白字符都要进行转义。&lt;/li&gt; &lt;li&gt;制表符不用于缩进。&lt;/li&gt; &lt;/ol&gt; &lt;h4 id=&quot;section-7&quot;&gt;2.3.2 特殊转义序列&lt;/h4&gt; &lt;p&gt;对于具有特殊&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97&quot;&gt;转义序列&lt;/a&gt;的任何字符(\b,\t,...</content>
 </entry>

 

 <entry>
   <title>Linux下查看系统信息</title>
   <link href="http://caterpillar.github.io/linux"/>
   <id>http://caterpillar.github.io/linux</id>
   <updated>2015-08-14T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;查看当前操作系统内核信息&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;uname -a &lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; Linux redcat 2.6.31-20-generic &lt;span class=&quot;c&quot;&gt;#58-Ubuntu SMP Fri Mar 12 05:23:09 UTC 2010 i686 GNU/Linux&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;查看当前操作系统发行版信息&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cat&lt;/span&gt; /etc/issue &lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; Ubuntu 9.10 &lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;查看cpu型号&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span...</content>
 </entry>

 

 <entry>
   <title>Markdown Syntax</title>
   <link href="http://caterpillar.github.io/markdown-syntax"/>
   <id>http://caterpillar.github.io/markdown-syntax</id>
   <updated>2015-08-12T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;« &lt;a href=&quot;http://wowubuntu.com&quot;&gt;访问 Wow!Ubuntu&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is Simplelified Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown: Syntax&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt; 这份文档派生(fork)于&lt;a href=&quot;http://markdown.tw/&quot;&gt;繁体中文版&lt;/a&gt;，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里&lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md&quot;&gt;查看它的源文件&lt;/a&gt;。「繁体中文版的原始文件可以&lt;a href=&quot;https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md&quot;&gt;查看这里&lt;/a&gt; 。」–By @&lt;a href=&quot;http://twitter.com/riku&quot;&gt;riku&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本项目托管于 &lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/&quot;&gt;GitCafe&lt;/a&gt;上，请通过”派生”和”合并请求”来帮忙改进本项目。&lt;/p&gt; &lt;h1 id=&quot;markdown----basichtml&quot;&gt;Markdown 语法说明 (简体中文版) / (&lt;a href=&quot;./basic.html&quot;&gt;点击查看快速入门&lt;/a&gt;)&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;a...</content>
 </entry>

 

 <entry>
   <title>Markdown Basics</title>
   <link href="http://caterpillar.github.io/markdown-basics"/>
   <id>http://caterpillar.github.io/markdown-basics</id>
   <updated>2015-08-12T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;« &lt;a href=&quot;http://wowubuntu.com&quot;&gt;访问 Wow!Ubuntu&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt; 这份文档派生(fork)于&lt;a href=&quot;http://markdown.tw/&quot;&gt;繁体中文版&lt;/a&gt;，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里&lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/basics.md&quot;&gt;查看它的源文件&lt;/a&gt;。「繁体中文版的原始文件可以&lt;a href=&quot;https://github.com/othree/markdown-syntax-zhtw/blob/master/basics.md&quot;&gt;查看这里&lt;/a&gt;」–By @&lt;a href=&quot;http://twitter.com/riku&quot;&gt;riku&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 本项目托管于 &lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/&quot;&gt;GitCafe&lt;/a&gt;上，请通过”派生”和”合并请求”来帮忙改进本项目。&lt;/p&gt; &lt;h1 id=&quot;markdown-basics---indexhtml&quot;&gt;Markdown: Basics （快速入门） / (&lt;a href=&quot;./index.html&quot;&gt;点击查看完整语法说明&lt;/a&gt;)&lt;/h1&gt; &lt;h2 id=&quot;getting-the-gist-of-markdowns-formatting-syntax&quot;&gt;Getting the Gist of Markdown’s Formatting Syntax&lt;/h2&gt; &lt;p&gt;此页提供了 Markdown 的简单概念， &lt;a href=&quot;http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md&quot; title=&quot;Markdown Syntax&quot;&gt;语法说明&lt;/a&gt; 页提供了完整详细的文档，说明了每项功能。但是 Markdown 其实很简单就可以上手，此页文档提供了一些范例，并且每个范例都会提供输出的 HTML 结果。&lt;/p&gt; &lt;p&gt;其实直接试试看也是一个很不错的方法， &lt;a href=&quot;http://daringfireball.net/projects/markdown/dingus&quot; title=&quot;Markdown Dingus&quot;&gt;Dingus&lt;/a&gt; 是一个网页应用程序，你可以把自已编写的 Markdown...</content>
 </entry>

 

 <entry>
   <title>Linux PAHT Setting</title>
   <link href="http://caterpillar.github.io/linux-path-setting"/>
   <id>http://caterpillar.github.io/linux-path-setting</id>
   <updated>2015-08-11T00:00:00+08:00</updated>
   <content type="html">&lt;h2 id=&quot;ubuntu-linux-path&quot;&gt;Ubuntu Linux 环境变量PATH设置&lt;/h2&gt; &lt;h3 id=&quot;ubuntu-linux&quot;&gt;Ubuntu Linux系统环境变量配置文件：&lt;/h3&gt; &lt;p&gt;/etc/profile : 在登录时,操作系统定制用户环境时使用的第一个文件 ,此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行。 &lt;/p&gt; &lt;p&gt;/etc /environment : 在登录时操作系统使用的第二个文件, 系统在读取你自己的profile前,设置环境文件的环境变量。 &lt;/p&gt; &lt;p&gt;~/.profile : 在登录时用到的第三个文件 是.profile文件,每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。&lt;/p&gt; &lt;p&gt;/etc/bashrc : 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取. &lt;/p&gt; &lt;p&gt;~/.bashrc : 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。 &lt;/p&gt; &lt;h3 id=&quot;pash&quot;&gt;PASH环境变量的设置方法：&lt;/h3&gt; &lt;h4 id=&quot;profilebashrc&quot;&gt;方法一：用户主目录下的.profile或.bashrc文件（推荐）&lt;/h4&gt; &lt;p&gt;登录到你的用户（非root），在终端输入： &lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gedit ~/.profile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;or...</content>
 </entry>

 

 <entry>
   <title>Spring Learning</title>
   <link href="http://caterpillar.github.io/spring-learning"/>
   <id>http://caterpillar.github.io/spring-learning</id>
   <updated>2015-08-10T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/img/spring_learning_images/ioc_interface.jpg&quot; alt=&quot;Spring Ioc interface design&quot; title=&quot;Spring Ioc interface design&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从接口BeanFactory到HierarchicalBeanFactory，再到ConfigurableBeanFactory，是一条主要的BeanFactory设计路径。在这条接口设计路径中，BeanFactory接口定义了基本的IoC容器的规范。在这个接口定义中，包括了getBean()这样的IoC容器的基本方法（通过这个方法可以从容器中取得Bean）。而HierarchicalBeanFactory接口在继承了BeanFactory的基本接口之后，增加了getParentBeanFactory()的接口功能，使BeanFactory具备了双亲IoC容器的管理功能。在接下来的ConfigurableBeanFactory接口中，主要定义了一些对BeanFactory的配置功能，比如通过setParentBeanFactory()设置双亲IoC容器，通过addBeanPostProcessor()配置Bean后置处理器，等等。通过这些接口设计的叠加，定义了BeanFactory就是简单IoC容器的基本功能。关于BeanFactory简单IoC容器的设计，我们会在后面的内容中详细介绍。&lt;/li&gt;
  &lt;li&gt;第二条接口设计主线是，以ApplicationContext应用上下文接口为核心的接口设计，这里涉及的主要接口设计有，从BeanFactory到ListableBeanFactory，再到ApplicationContext，再到我们常用的WebApplicationContext或者ConfigurableApplicationContext接口。我们常用的应用上下文基本上都是ConfigurableApplicationContext或者WebApplicationContext的实现。在这个接口体系中，ListableBeanFactory和HierarchicalBeanFactory两个接口，连接BeanFactory接口定义和ApplicationConext应用上下文的接口定义。在ListableBeanFactory接口中，细化了许多BeanFactory的接口功能，比如定义了getBeanDefinitionNames()接口方法；对于HierarchicalBeanFactory接口，我们在前文中已经提到过；对于ApplicationContext接口，它通过继承MessageSource、ResourceLoader、ApplicationEventPublisher接口，在BeanFactory简单IoC容器的基础上添加了许多对高级容器的特性的支持。&lt;/li&gt;
  &lt;li&gt;这里涉及的是主要接口关系，而具体的IoC容器都是在这个接口体系下实现的，比如DefaultListableBeanFactory，这个基本IoC容器的实现就是实现了ConfigurableBeanFactory，从而成为一个简单IoC容器的实现。像其他IoC容器，比如XmlBeanFactory，都是在DefaultListableBeanFactory的基础上做扩展，同样地，ApplicationContext的实现也是如此。&lt;/li&gt;
  &lt;li&gt;这个接口系统是以BeanFactory和ApplicationContext为核心的。而BeanFactory又是IoC容器的最基本接口，在ApplicationContext的设计中，一方面，可以看到它继承了BeanFactory接口体系中的ListableBeanFactory、AutowireCapableBeanFactory、HierarchicalBeanFactory等BeanFactory的接口，具备了BeanFactory IoC容器的基本功能；另一方面，通过继承MessageSource、ResourceLoadr、ApplicationEventPublisher这些接口，BeanFactory为ApplicationContext赋予了更高级的IoC容器特性。对于ApplicationContext而言，为了在Web环境中使用它，还设计了WebApplicationContext接口，而这个接口通过继承ThemeSource接口来扩充功能。&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>

 

 <entry>
   <title>让pandoc输出pdf时支持中文</title>
   <link href="http://caterpillar.github.io/pandoc-output-pdf"/>
   <id>http://caterpillar.github.io/pandoc-output-pdf</id>
   <updated>2015-08-10T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;主机环境为：Ubuntu 12.04 LTS。对于RH系列，yum安装包的名称可能会有不同，不过yum联想能力比较强，应该不是问题。&lt;/p&gt; &lt;h3 id=&quot;pandoctex-live&quot;&gt;安装pandoc，安装tex-live&lt;/h3&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; apt-get install pandoc texlive texlive-latex-extra texlive-latex-recommanded&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;注意，如果要用beamer生成幻灯片的话，则要从cabal安装。&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; apt-get install cabal-install &lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; cabal update &lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; cabal install pandoc &lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export PATH=&amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.cabal/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;section&quot;&gt;安装中文字体&lt;/h3&gt; &lt;p&gt;可以用“fc-list”命令查看已安装字体。使用如下命令安装gnome中文字体。&lt;/p&gt; &lt;div...</content>
 </entry>

 

 <entry>
   <title>Project Manage Experience Summery</title>
   <link href="http://caterpillar.github.io/project-manage"/>
   <id>http://caterpillar.github.io/project-manage</id>
   <updated>2015-08-09T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;近期，好屋中国官网app项目（下称“官网app”）如期上线，项目一期正式告一段落。这一期官网app项目核心是一个面向C端用户的新房二手房交易app，工作量也主要集中在app及其后台服务。但这一期项目相关联的系统及业务却非常广泛，包括HOSS、合伙人app、内部合伙人、外部合伙人、助理宝、抢钱宝，基本上关于新房二手房各个产品线上的产品和系统都有新增需求和业务变更，整个工程的复杂度可想而知。系统的设计开发测试及上线准备持续大约一个月，执行过程也遇到了大大小小的包括技术、业务、管理等等各种问题，但总的来说比较顺利，产品质量也比较高。这与各个小组成员的辛勤劳动和密切配合是密不可分。这期项目中，我带领官网app和合伙人app（包括助理宝、抢钱宝等）团队，主要完成了官网app后台（包括官网app运营）及合伙人（包括内部合伙人 外部合伙人）、助理宝、抢钱宝和抢客宝的新系统研发及已有系统的变更和维护。团队人数12个人以上，其中有一半以上成员是刚加入的新员工，时间紧，任务重；另外，第一次集成单点登录，第一次通过公共服务集成在线支付；再加上，项目过程中，合伙人及助理宝业务需求并行开发和上线。团队大，业务复杂，对我来说都是第一次，因此，要管理好团队按时保质保量按时上线，对我也是不小的挑战。在此，我对这次项目做一个小小的总结，总结经验，以为下一次项目执行更臻完善；吸取教训，以防再犯同样的错误。&lt;/p&gt; &lt;h2 id=&quot;section&quot;&gt;经验总结&lt;/h2&gt; &lt;h3 id=&quot;section-1&quot;&gt;充分发挥团队的力量&lt;/h3&gt; &lt;p&gt;1.充满信心的将工作任务分配给团队成员，包括任务工作量评估、系统的设计、小组间的沟通协调等工作&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;这样不但可以提高工作效率，也可以是团队成员得到综合能力的锻炼&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;2.通过复审和检查保证工作质量&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;通过复核和检查，并及时沟通，不但可以保证质量，可以使团队成员了解工作不足之处，失误的地方，同事能更充分的了解整个系统，不断提高工作效率和完善工作质量&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;3.畅所欲言，每个成员都可以提出好工作的方法，指出团队及个人的有待提高指出&lt;/p&gt; &lt;h3 id=&quot;section-2&quot;&gt;团队实行以新带旧的结对模式组织&lt;/h3&gt; &lt;p&gt;首先，敏捷开发里的结对编程就是一个管理原则和工作方式，其好处不言而喻；&lt;/p&gt; &lt;p&gt;其次，老带新，可以保证新入职员工对业务能够充分理解，并注意其中的关键点，不至于走弯路；同时，老员工也可以从新员工那里学习到解决问题的新的思路和方法；&lt;/p&gt; &lt;p&gt;再次，可以充分发挥团队的力量，两个人组成一个小团队，分担部分的管理和沟通的工作；&lt;/p&gt; &lt;p&gt;最后，老员工可以锻炼自己的协调沟通甚至是管理方法的能力。&lt;/p&gt; &lt;h3 id=&quot;section-3&quot;&gt;保持上下左右四面八方及时沟通&lt;/h3&gt; &lt;p&gt;1.&lt;strong&gt;上&lt;/strong&gt; 是指向上的沟通，无论是技术实现，业务需求，还是团队协作，沟通管理，只要我们处理不了的就要及时向上反馈，就像代码里的异常处理&lt;/p&gt; &lt;p&gt;这样的代码最危险：&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt; &lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;...</content>
 </entry>

 

 <entry>
   <title>Redis Learning</title>
   <link href="http://caterpillar.github.io/redis"/>
   <id>http://caterpillar.github.io/redis</id>
   <updated>2015-07-19T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;Redis 是一个 Key-Value 存储系统。和 Memcached 类似,它支持存储的 value 类型相对更多,包括 string(字符串)、list(链表)、set(集合)和 zset(有序集合)。这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作,而且这些操作都是原子性的。在此基础上,Redis 支持各种不同方式的排序。与 memcached 一样,为了保证效率,数据都是缓存在内存中。区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件,并且在此基础上实现了 master-slave(主从)同步。&lt;/p&gt;

&lt;h3 id=&quot;nosql&quot;&gt;NoSQL介绍&lt;/h3&gt;

&lt;h3 id=&quot;section&quot;&gt;数据类型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;String类型&lt;/li&gt;
  &lt;li&gt;Lists 列表&lt;/li&gt;
  &lt;li&gt;Sets 集合&lt;/li&gt;
  &lt;li&gt;Sorted sets 有序集合&lt;/li&gt;
  &lt;li&gt;Hashes 哈希表&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>

 

 <entry>
   <title>Linux Learning</title>
   <link href="http://caterpillar.github.io/linux-learning"/>
   <id>http://caterpillar.github.io/linux-learning</id>
   <updated>2015-06-27T00:00:00+08:00</updated>
   <content type="html">&lt;p&gt;这是一篇关于linux常用命令的博文，主要记录我在学习中遇到的一些容易忘记的linux命令、用法以及注意点。不过，这里需要说明的是，我并不是一个linux的初学者。那么，为什么会有这篇博客呢？原因自己的linux学习基础不扎实，在有了几年linux系统使用经验后，仍然觉得力不从心。然而linux是一个优秀的且免费自由的操作系统这一点是毋庸置疑的，我当然希望自己能够更熟练、更高效的使用linux。所以，从今天开始，重新启程，从linux基础起，对linux的基础知识和用法作进一步的学习和研究，使基础的知识更扎实，同时捡起自己遗漏的知识点，并一一记录。所谓“学而时习之，不亦说乎”！&lt;/p&gt; &lt;p&gt;而这篇博客，正是最遗漏知识点的记录，相信这也是你容易忽略的但却很重要的linux使用技巧吧！闲话少絮，我们开始吧。&lt;/p&gt; &lt;h2 id=&quot;terminal&quot;&gt;Terminal的使用&lt;/h2&gt; &lt;h3 id=&quot;terminal-1&quot;&gt;常用Terminal使用技巧&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Ctr+P：回到上一个命令&lt;/li&gt; &lt;li&gt;Ctr+R :快速反向查找命令&lt;/li&gt; &lt;li&gt;Ctr+A：回到行首&lt;/li&gt; &lt;li&gt;Ctr+E：回到行尾&lt;/li&gt; &lt;li&gt;Ctr+D：向后删除一个字符&lt;/li&gt; &lt;li&gt;Ctr+W：向前删除一个单词&lt;/li&gt; &lt;li&gt;Ctr+向左：向前移动一个单词&lt;/li&gt; &lt;li&gt;Ctr+向右：向后移动一个单词&lt;/li&gt; &lt;li&gt;Ctr+l：清屏&lt;/li&gt; &lt;li&gt;Ctr+u：删除光标前的所以字符&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;设置命令行快捷键模式&lt;/p&gt; &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -o vi &lt;span class=&quot;c&quot;&gt;#linux命令行快捷键设置为vi模式&lt;/span&gt; &lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -o emacs &lt;span class=&quot;c&quot;&gt;# inux命令行快捷键设置为emacs模式（默认模式）&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;section&quot;&gt;常用命令&lt;/h2&gt; &lt;h3 id=&quot;ln&quot;&gt;创建文件命令 &lt;code&gt;ln&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;ln...</content>
 </entry>

 

</feed>